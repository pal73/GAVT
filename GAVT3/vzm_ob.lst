     1: #define XTAL_FREQ 4MHZ
     2: #include <pic.h>
     3: #include "delay.h"
     4: 
     5: #define but_mask        0b1111111111111010
     6: #define but_on          3
     7: #define but_onL 10
     8: #define no_but          0b1111111111111111
     9: 
    10: #define led_NET  3
    11: #define led_WORK 2
    12: #define led_ERR  1
    13: 
    14: #define PP1     4
    15: #define PP2     3
    16: #define PP3     2
    17: #define PP4     1
    18: #define PP5     0
    19: #define PP6     5
    20: #define PP7     1
    21: #define NET     5
    22: #define NET_REZ 7
    23: 
    24: #define MD1     15
    25: #define MD2     14
    26: #define VR      13
    27: 
    28: //#define VR    0  кнопка старт
    29: //#define VR    2  кнопка стоп
    30: 
    31: #define PROG1   10
    32: #define PROG2   8
    33: #define PROG3   9
    34: 
    35: 
    36: 
    37: __CONFIG (0x3d7a);
    38: 
    39: 
    40: //char adc_cnt;
    41: //char tmr1_init;
    42: bit bit_100Hz;
    43: bit bit_10Hz;
    44: bit bit_1Hz;
    45: bit bVR;
    46: bit bMD1;
    47: bit bMD2;
    48: bit bERR;
    49: /*bit bV1;
    50: bit bV0;*/
    51: 
    52: unsigned int in_word;
    53: 
    54: 
    55: 
    56: unsigned but_n;
    57: unsigned but_s;
    58: unsigned but/*,but_but*/;
    59: char enum{sOFF,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16}step=sOFF;
    60: char enum{p1,p2,p3,pOFF}prog=p1;
    61: char but0_cnt,but1_cnt;
    62: char but_onL_temp;
    63: signed char cnt_del=0;
    64: 
    65: char cnt_md1,cnt_md2,cnt_vr;
    66: 
    67: 
    68: bit l_but;              //идет длинное нажатие на кнопку
    69: bit n_but;          //произошло нажатие
    70: bit speed;              //разрешение ускорения перебора
    71: 
    72: 
    73: 
    74: 
    75: char cnt0,cnt1,temper,temp,vol_l,vol_i;
    76: char cnt_but_START,cnt_but_STOP;
    77: 
    78: bit bON_START,bON_STOP;
    79: 
    80: //**********************************************
    81: //Задержки
    82: void DelayMs(unsigned char cnt)
    83: {
    84: unsigned char   i;
    85:         do {
    86:                 i = 4;
    87:                 do {
    88:                         DelayUs(250);
    89:                 } while(--i);
    90:         } while(--cnt);
    91: 
    92: }
    93: 
    94: 
    95: 
    96: //-----------------------------------------------
    97: void in_read(void)
    98: {
    99: char i,temp;
   100: unsigned int tempUI;
   101: TRISA&=0xf0;
   102: TRISA4=1;
   103: 
   104: for(i=0;i<16;i++)
   105:         {
   106:         temp=PORTA;
   107:         temp&=0xf0;
   108:         temp+=i;
   109:         PORTA=temp;
   110:         tempUI<<=1;
   111:         DelayUs(200);
   112:         if(RA4)tempUI|=0x0001;
   113:         else tempUI&=0xfffe;
   114:         }
   115: in_word=tempUI;
   116: }
   117: 
   118: //-----------------------------------------------
   119: void step_contr(void)
   120: {
   121: if(prog==p1)
   122:         {
   123:         if(step==s1)
   124:                 {
   125:                 cnt_del--;
   126:                 if(cnt_del==0)
   127:                         {
   128:                         step=s2;
   129:                         }
   130:                 }
   131: 
   132:         else if(step==s2)
   133:                 {
   134:           if(!bVR)goto step_contr_end;
   135: 
   136:                 cnt_del=30;
   137:                 step=s3;
   138:                 }
   139: 
   140:         else if(step==s3)
   141:                 {
   142:                 cnt_del--;
   143:                 if(cnt_del==0)
   144:                         {
   145:                         step=s4;
   146:                         }
   147:           }
   148:         else if(step==s4)
   149:                 {
   150:           if(!bMD1)goto step_contr_end;
   151: 
   152:                 cnt_del=30;
   153:                 step=s5;
   154:                 }
   155:         else if(step==s5)
   156:                 {
   157:                 cnt_del--;
   158:                 if(cnt_del==0)
   159:                         {
   160:                         step=s6;
   161:                         }
   162:                 }
   163:         else if(step==s6)
   164:                 {
   165:                 if(!bMD2)goto step_contr_end;
   166:           cnt_del=30;
   167:                 step=s7;
   168:                 }
   169:         else if(step==s7)
   170:                 {
   171:                 cnt_del--;
   172:                 if(cnt_del==0)
   173:                         {
   174:                         step=s8;
   175:                         cnt_del=30;
   176:                         }
   177:                 }
   178:         else if(step==s8)
   179:                 {
   180:                 cnt_del--;
   181:                 if(cnt_del==0)
   182:                         {
   183:                         step=s9;
   184:                         cnt_del=150;
   185:                         }
   186:                 }
   187:         else if(step==s9)
   188:                 {
   189:                 cnt_del--;
   190:                 if(cnt_del==0)
   191:                         {
   192:                         step=s10;
   193:                         cnt_del=30;
   194:                         }
   195:                 }
   196:         else if(step==s10)
   197:                 {
   198:                 cnt_del--;
   199:                 if(cnt_del==0)
   200:                         {
   201:                         step=sOFF;
   202:                         }
   203:                 }
   204:         }
   205: 
   206: if(prog==p2)
   207:         {
   208: 
   209:         if(step==s1)
   210:                 {
   211:                 cnt_del--;
   212:                 if(cnt_del==0)
   213:                         {
   214:                         step=s2;
   215:                         }
   216:                 }
   217: 
   218:         else if(step==s2)
   219:                 {
   220:           if(!bVR)goto step_contr_end;
   221:           cnt_del=30;
   222:                 step=s3;
   223:                 }
   224: 
   225:         else if(step==s3)
   226:                 {
   227:                 cnt_del--;
   228:                 if(cnt_del==0)
   229:                         {
   230:                         step=s4;
   231:                         }
   232:                 }
   233: 
   234:         else if(step==s4)
   235:                 {
   236:           if(!bMD1)goto step_contr_end;
   237:                 cnt_del=30;
   238:                 step=s5;
   239:                 }
   240: 
   241:         else if(step==s5)
   242:                 {
   243:                 cnt_del--;
   244:                 if(cnt_del==0)
   245:                         {
   246:                         step=s6;
   247:                         cnt_del=30;
   248:                         }
   249:                 }
   250: 
   251:         else if(step==s6)
   252:                 {
   253:                 cnt_del--;
   254:                 if(cnt_del==0)
   255:                         {
   256:                         step=s7;
   257:                         cnt_del=150;
   258:                         }
   259:                 }
   260: 
   261:         else if(step==s7)
   262:                 {
   263:                 cnt_del--;
   264:                 if(cnt_del==0)
   265:                         {
   266:                         step=s8;
   267:                         cnt_del=30;
   268:                         }
   269:                 }
   270:         else if(step==s8)
   271:                 {
   272:                 cnt_del--;
   273:                 if(cnt_del==0)
   274:                         {
   275:                         step=sOFF;
   276:                         }
   277:                 }
   278:         }
   279: 
   280: if(prog==p3)
   281:         {
   282: 
   283:         if(step==s1)
   284:                 {
   285:                 cnt_del--;
   286:                 if(cnt_del==0)
   287:                         {
   288:                         step=s2;
   289:                         }
   290:                 }
   291: 
   292:         else if(step==s2)
   293:                 {
   294:           if(!bVR)goto step_contr_end;
   295:           cnt_del=30;
   296:                 step=s3;
   297:                 }
   298: 
   299:         else if(step==s3)
   300:                 {
   301:                 cnt_del--;
   302:                 if(cnt_del==0)
   303:                         {
   304:                         step=s4;
   305:                         }
   306:                 }
   307: 
   308:         else if(step==s4)
   309:                 {
   310:           if(!bMD1)goto step_contr_end;
   311:           if(!bMD2)goto step_contr_end;
   312:                 cnt_del=150;
   313:                 step=s5;
   314:                 }
   315: 
   316:         else if(step==s5)
   317:                 {
   318:                 cnt_del--;
   319:                 if(cnt_del==0)
   320:                         {
   321:                         step=s6;
   322:                         cnt_del=30;
   323:                         }
   324:                 }
   325: 
   326:         else if(step==s6)
   327:                 {
   328:                 cnt_del--;
   329:                 if(cnt_del==0)
   330:                         {
   331:                         step=s7;
   332:                         cnt_del=30;
   333:                         }
   334:                 }
   335: 
   336:         else if(step==s7)
   337:                 {
   338:                 cnt_del--;
   339:                 if(cnt_del==0)
   340:                         {
   341:                         step=sOFF;
   342:                         }
   343:                 }
   344: 
   345:         }
   346: step_contr_end:
   347: asm("nop");
   348: }
   349: 
   350: //-----------------------------------------------
   351: void out_out(void)
   352: {
   353: char temp=0;
   354: TRISB=0x00;
   355: if(prog==p1)
   356:         {
   357:         if(step==sOFF)
   358:                 {
   359:                 temp=0;
   360:                 }
   361: 
   362:         else    if(step==s1)
   363:                 {
   364:                 temp|=(1<<PP1)|(1<<PP2);
   365:                 }
   366: 
   367:         else if(step==s2)
   368:                 {
   369:                 temp|=(1<<PP1)|(1<<PP2)|(1<<PP3);
   370:                 }
   371: 
   372:         else if(step==s3)
   373:                 {
   374:                 temp|=(1<<PP1)|(1<<PP3)|(1<<NET)|(1<<NET_REZ);
   375:                 }
   376: 
   377:         else if((step==s4)||(step==s5))
   378:                 {
   379:                 temp|=(1<<PP1)|(1<<PP3)|(1<<PP4)|(1<<NET)|(1<<NET_REZ);
   380:                 }
   381: 
   382:         else if((step==s6)||(step==s7))
   383:                 {
   384:                 temp|=(1<<PP1)|(1<<PP3)|(1<<PP5)|(1<<NET)|(1<<NET_REZ);
   385:                 }
   386: 
   387:         else if(step==s8)
   388:                 {
   389:           temp|=(1<<PP1)|(1<<PP3);
   390:                 }
   391: 
   392:         else if(step==s9)
   393:                 {
   394:                 temp|=(1<<PP1)|(1<<PP2);
   395:                 }
   396: 
   397:         else if(step==s10)
   398:                 {
   399:                 temp|=(1<<PP2);
   400:                 }
   401: 
   402:         }
   403: 
   404: if(prog==p2)
   405:         {
   406:         if(step==sOFF)
   407:                 {
   408:                 temp=0;
   409:                 }
   410: 
   411:         else    if(step==s1)
   412:                 {
   413:                 temp|=(1<<PP1)|(1<<PP2);
   414:                 }
   415: 
   416:         else if(step==s2)
   417:                 {
   418:                 temp|=(1<<PP1)|(1<<PP2)|(1<<PP3);
   419:                 }
   420: 
   421:         else if(step==s3)
   422:                 {
   423:                 temp|=(1<<PP1)|(1<<PP3)|(1<<NET)|(1<<NET_REZ);
   424:                 }
   425: 
   426:         else if((step==s4)||(step==s5))
   427:                 {
   428:                 temp|=(1<<PP1)|(1<<PP3)|(1<<PP4)|(1<<NET)|(1<<NET_REZ);
   429:                 }
   430: 
   431:         else if(step==s6)
   432:                 {
   433:                 temp|=(1<<PP1)|(1<<PP3);
   434:                 }
   435: 
   436:         else if(step==s7)
   437:                 {
   438:                 temp|=(1<<PP1)|(1<<PP2);
   439:                 }
   440: 
   441:         else if(step==s8)
   442:                 {
   443:                 temp|=(1<<PP2);
   444:                 }
   445:         }
   446: 
   447: if(prog==p3)
   448:         {
   449:         if(step==sOFF)
   450:                 {
   451:                 temp=0;
   452:                 }
   453: 
   454:         else    if(step==s1)
   455:                 {
   456:                 temp|=(1<<PP1)|(1<<PP2);
   457:                 }
   458: 
   459:         else if(step==s2)
   460:                 {
   461:           temp|=(1<<PP1)|(1<<PP2)|(1<<PP3);
   462:                 }
   463: 
   464:         else if(step==s3)
   465:                 {
   466:                 temp|=(1<<PP1)|(1<<PP3);
   467:                 }
   468: 
   469:         else if(step==s4)
   470:                 {
   471:           temp|=(1<<PP1)|(1<<PP3)|(1<<PP4)|(1<<PP5);
   472:                 }
   473: 
   474:         else if(step==s5)
   475:                 {
   476:                 temp|=(1<<PP1)|(1<<PP2)|(1<<PP4)|(1<<PP5);
   477:                 }
   478: 
   479:         else if(step==s6)
   480:                 {
   481:                 temp|=(1<<PP2)|(1<<PP4)|(1<<PP5);
   482:                 }
   483: 
   484:         else if(step==s7)
   485:                 {
   486:                 temp|=(1<<PP2);
   487:                 }
   488: 
   489:         }
   490: PORTB=temp;
   491: 
   492: }
   493: 
   494: //-----------------------------------------------
   495: void led_out(void)
   496: {
   497: char temp=0;
   498: TRISC=0xF0;
   499: 
   500: temp&=~(1<<led_NET);
   501: 
   502: if(step!=sOFF)
   503:         {
   504:         temp&=~(1<<led_WORK);
   505:         }
   506: else temp|=(1<<led_WORK);
   507: 
   508: 
   509: if(step==sOFF)
   510:         {
   511:         if(bERR)
   512:                 {
   513:                 temp&=~(1<<led_ERR);
   514:                 }
   515:         else
   516:                 {
   517:                 temp|=(1<<led_ERR);
   518:                 }
   519: 
   520:         }
   521: else temp|=(1<<led_ERR);
   522: 
   523: 
   524: 
   525: PORTC=(PORTC|0b00001111)&temp;
   526: }
   527: 
   528: //-----------------------------------------------
   529: void mdvr_drv(void)
   530: {
   531: if(!(in_word&(1<<MD1)))
   532:         {
   533:         if(cnt_md1<10)
   534:                 {
   535:                 cnt_md1++;
   536:                 if(cnt_md1==10) bMD1=1;
   537:                 }
   538: 
   539:         }
   540: else
   541:         {
   542:         if(cnt_md1)
   543:                 {
   544:                 cnt_md1--;
   545:                 if(cnt_md1==0) bMD1=0;
   546:                 }
   547: 
   548:         }
   549: 
   550: if(!(in_word&(1<<MD2)))
   551:         {
   552:         if(cnt_md2<10)
   553:                 {
   554:                 cnt_md2++;
   555:                 if(cnt_md2==10) bMD2=1;
   556:                 }
   557: 
   558:         }
   559: else
   560:         {
   561:         if(cnt_md2)
   562:                 {
   563:                 cnt_md2--;
   564:                 if(cnt_md2==0) bMD2=0;
   565:                 }
   566: 
   567:         }
   568: 
   569: if(!(in_word&(1<<VR)))
   570:         {
   571:         if(cnt_vr<10)
   572:                 {
   573:                 cnt_vr++;
   574:                 if(cnt_vr==10) bVR=1;
   575:                 }
   576: 
   577:         }
   578: else
   579:         {
   580:         if(cnt_vr)
   581:                 {
   582:                 cnt_vr--;
   583:                 if(cnt_vr==0) bVR=0;
   584:                 }
   585: 
   586:         }
   587: }
   588: 
   589: //-----------------------------------------------
   590: void err_drv(void)
   591: {
   592: if(step==sOFF)
   593:         {
   594:         if((bMD1)||(bMD2)||(bVR)) bERR=1;
   595:         else bERR=0;
   596:         }
   597: else bERR=0;
   598: }
   599: 
   600: //-----------------------------------------------
   601: void prog_drv(void)
   602: {
   603: if((!(in_word&(1<<PROG1)))&&(in_word&(1<<PROG2))&&(in_word&(1<<PROG3)))
   604:         {
   605:         prog=p1;
   606:         }
   607: else if((!(in_word&(1<<PROG2)))&&(in_word&(1<<PROG1))&&(in_word&(1<<PROG3)))
   608:         {
   609:         prog=p2;
   610:         }
   611: else if((!(in_word&(1<<PROG3)))&&(in_word&(1<<PROG2))&&(in_word&(1<<PROG1)))
   612:         {
   613:         prog=p3;
   614:         }
   615: else prog=pOFF;
   616: }
   617: 
   618: //-----------------------------------------------
   619: // Подпрограмма драйва до 16 входов
   620: // различает короткое и длинное нажатие,
   621: // срабатывает на отпускание кнопки, возможность
   622: // ускорения перебора при длинном нажатии...
   623: void but_drv(void)
   624: {
   625: if(!(in_word&0x0001))
   626:         {
   627:         if(cnt_but_START<but_on)
   628:                 {
   629:                 cnt_but_START++;
   630:                 if(cnt_but_START>=but_on)
   631:                         {
   632:                         bON_START=1;
   633:                         }
   634:                 }
   635:         }
   636: else
   637:         {
   638:      cnt_but_START=0;
   639:         }
   640: 
   641: if(!(in_word&0x0004))
   642:         {
   643:         if(cnt_but_STOP<but_on)
   644:                 {
   645:                 cnt_but_STOP++;
   646:                 if(cnt_but_STOP>=but_on)
   647:                         {
   648:                         bON_STOP=1;
   649:                         }
   650:                 }
   651:         }
   652: else
   653:         {
   654:      cnt_but_STOP=0;
   655:         }
   656: /*but_n=in_word|but_mask;
   657: if(but_n==no_but||but_n!=but_s)
   658:         {
   659:         speed=0;
   660:         n_but=0;
   661:         but=no_but;
   662:         if (((but0_cnt>=but_on)||(but1_cnt!=0))&&(!l_but))
   663:                 {
   664:              n_but=1;
   665:           but=but_s;
   666:           }
   667:         if (but1_cnt>=but_onL_temp)
   668:                 {
   669:              n_but=1;
   670:           but=but_s&0b01111111;
   671:           }
   672:         l_but=0;
   673:         but_onL_temp=but_onL;
   674:         but0_cnt=0;
   675:         but1_cnt=0;
   676:      goto but_drv_out;
   677:         }
   678: if(but_n==but_s)
   679:         {
   680:         but0_cnt++;
   681:         if(but0_cnt>=but_on)
   682:                 {
   683:                 but0_cnt=0;
   684:                 but1_cnt++;
   685:                 if(but1_cnt>=but_onL_temp)
   686:                         {
   687:                         but=but_s&0b01111111;
   688:                         but1_cnt=0;
   689:                         n_but=1;
   690:                         l_but=1;
   691:                         if(speed)
   692:                                 {
   693:                                 but_onL_temp=but_onL_temp=2;
   694:                                 if(but_onL_temp<=2) but_onL_temp=2;
   695:                                 }
   696:                         }
   697:                 }
   698:         }
   699: but_drv_out:
   700: but_s=but_n;
   701: */
   702: }
   703: 
   704: #define butSTART 0b1111111111111110
   705: #define butSTOP  0b1111111111111011
   706: //-----------------------------------------------
   707: void but_an(void)
   708: {
   709: if(bON_START)
   710:         {
   711:         if((step==sOFF)&&(!bERR))
   712:                 {
   713:                 step=s1;
   714:                 if(prog==p1) cnt_del=50;
   715:                 else if(prog==p2) cnt_del=50;
   716:                 else if(prog==p3) cnt_del=50;
   717: 
   718:                 }
   719:         }
   720: if(bON_STOP)
   721:         {
   722:         step=sOFF;
   723: 
   724:         }
   725: //if (!n_but) goto but_an_end;
   726: /*
   727: if(but==butSTART)
   728:         {
   729:         if(step==sOFF)
   730:                 {
   731:                 step=s1;
   732:                 if(prog==p1) cnt_del=50;
   733:                 else if(prog==p2) cnt_del=50;
   734:                 else if(prog==p3) cnt_del=50;
   735:                 }
   736:         }
   737: else if(but==butSTOP)
   738:         {
   739:         step=sOFF;
   740:         }
   741: 
   742: but_an_end:
   743: asm("nop");
   744: */
   745: bON_START=0;
   746: bON_STOP=0;
   747: }
   748: 
   749: //-----------------------------------------------
   750: void t0_init(void)
   751: {
   752: OPTION=0x07;
   753: T0IE=1;
   754: PEIE=1;
   755: TMR0=-40;
   756: }
   757: 
   758: 
   759: 
   760: //***********************************************
   761: //***********************************************
   762: //***********************************************
   763: //***********************************************
   764: void interrupt isr(void)
   765: {
   766: 
   767: di();
   768: 
   769: if(T0IF)
   770:         {
   771:         t0_init();
   772:         T0IF=0;
   773:         bit_100Hz=1;
   774:         if((++cnt0)==10)
   775:                 {
   776:                 cnt0=0;
   777:                 bit_10Hz=1;
   778:                 if(++cnt1==10)
   779:                         {
   780:                         cnt1=0;
   781:                         bit_1Hz=1;
   782:                         }
   783:                 }
   784:         }
   785: 
   786: ei();
   787: }
   788: 
   789: 
   790: //===============================================
   791: //===============================================
   792: //===============================================
   793: //===============================================
   794: void main(void)
   795: {
   796: 
   797: t0_init();
   798: 
   799: 
   800: ei();
   801: PEIE=1;
   802: 
   803: di();
   804: 
   805: 
   806: 
   807: ei();
   808: 
   809: TRISB=0x00;
   810: PORTB=0x00;
   811: PORTC|=(1<<led_ERR);
   812: //
   813: 
   814: while (1)
   815:         {
   816:         if(bit_100Hz)
   817:                 {
   818:                 bit_100Hz=0;
   819:         //      PORTC^=0x0f;
   820:         //      PORTB^=0b01100000;
   821: 
   822:           in_read();
   823:           step_contr();
   824:           mdvr_drv();
   825:                 but_drv();
   826:                 but_an();
   827:                 }
   828:         if(bit_10Hz)
   829:                 {
   830:                 bit_10Hz=0;
   831:           out_out();
   832:                 led_out();
   833:                 err_drv();
   834:           prog_drv();
   835:            //   TRISC=0;
   836:            //   if(bVR) PORTB^=(1<<NET);
   837:         //  PORTC^=0xff;
   838: 
   839:                 }
   840:         if(bit_1Hz)
   841:                 {
   842:                 bit_1Hz=0;
   843:                 di();
   844:         //      PORTB^=0xff;
   845: /*              if(prog==p1) PORTB^=(1<<PP1);
   846:                 else if(prog==p2) PORTB^=(1<<PP2);
   847:                 else if(prog==p3) PORTB^=(1<<PP3); */
   848:                 ei();
   849: 
   850: 
   851: 
   852:                 }
   853: 
   854: 
   855:         }
   856: }
   857: 
