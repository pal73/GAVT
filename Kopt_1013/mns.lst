
AVRASM ver. 1.52  mns.asm Sun Mar 18 18:53:22 2007


         ;CodeVisionAVR C Compiler V1.24.1d Standard
         ;(C) Copyright 1998-2004 Pavel Haiduc, HP InfoTech s.r.l.
         ;http://www.hpinfotech.ro
         ;e-mail:office@hpinfotech.ro
         
         ;Chip type           : ATmega8
         ;Program type        : Application
         ;Clock frequency     : 1,000000 MHz
         ;Memory model        : Small
         ;Optimize for        : Size
         ;(s)printf features  : int, width
         ;(s)scanf features   : long, width
         ;External SRAM size  : 0
         ;Data Stack size     : 256 byte(s)
         ;Heap size           : 0 byte(s)
         ;Promote char to int : No
         ;char is unsigned    : Yes
         ;8 bit enums         : Yes
         ;Enhanced core instructions    : On
         ;Automatic register allocation : On
         
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU GICR=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x80
          	.EQU __sm_mask=0x70
          	.EQU __sm_adc_noise_red=0x10
          	.EQU __sm_powerdown=0x20
          	.EQU __sm_powersave=0x30
          	.EQU __sm_standby=0x60
          	.EQU __sm_ext_standby=0x70
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	LDI  R30,0
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTBRM
          	LDI  R@0,LOW(@1)
          	.ENDM
         
          	.MACRO __POINTWRM
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __POINTBRMN
          	LDI  R@0,LOW(@1+@2)
          	.ENDM
         
          	.MACRO __POINTWRMN
          	LDI  R@0,LOW(@2+@3)
          	LDI  R@1,HIGH(@2+@3)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	RCALL __PUTDP1
          	.ENDM
         
         
          	.MACRO __GETB1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOVW R30,R0
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOVW R26,R0
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __MULBRR
          	MULS R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __MULBRRU
          	MUL  R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "mns.vec"
         
         ;INTERRUPT VECTORS
000000 c024      	RJMP __RESET
000001 cffe      	RJMP 0
000002 cffd      	RJMP 0
000003 c24e      	RJMP _timer2_comp_isr
000004 c249      	RJMP _timer2_ovf_isr
000005 cffa      	RJMP 0
000006 cff9      	RJMP 0
000007 cff8      	RJMP 0
000008 cff7      	RJMP 0
000009 c21c      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0
00000b cff4      	RJMP 0
00000c cff3      	RJMP 0
00000d cff2      	RJMP 0
00000e c244      	RJMP _adc_isr
00000f cff0      	RJMP 0
000010 cfef      	RJMP 0
000011 cfee      	RJMP 0
000012 cfed      	RJMP 0
         
          	.INCLUDE "mns.inc"
          	.DEF _t0_cnt0=R5
          	.DEF _t0_cnt1=R6
          	.DEF _t0_cnt2=R7
          	.DEF _t0_cnt3=R8
          	.DEF _t0_cnt4=R9
          	.DEF _bankA=R10
          	.DEF _bankB=R12
          	.DEF _flags=R14
          _3:
          	.DB  0x5,0x6,0x7
000013 0605
000014 0007
          _4:
          	.DW  0x19
000015 0019
          _5:
          	.DB  0x19
000016 0019
          _DF:
          	.DB  0x0,0xA,0xF,0x14,0x19,0x1E,0x23
000017 0a00
000018 140f
000019 1e19
00001a 0023
         
          __GLOBAL_INI_TBL:
          	.DW  0x03
00001b 0003
          	.DW  _cher
00001c 0209
          	.DW  _3*2
00001d 0026
         
          	.DW  0x02
00001e 0002
          	.DW  _cher_cnt
00001f 020c
          	.DW  _4*2
000020 002a
         
          	.DW  0x01
000021 0001
          	.DW  _reset_cnt
000022 020e
          	.DW  _5*2
000023 002c
         
          	.DW  0
000024 0000
         
          __RESET:
000025 94f8      	CLI
000026 27ee      	CLR  R30
000027 bbec      	OUT  EECR,R30
         
         ;INTERRUPT VECTORS ARE PLACED
         ;AT THE START OF FLASH
000028 e0f1      	LDI  R31,1
000029 bffb      	OUT  GICR,R31
00002a bfeb      	OUT  GICR,R30
00002b bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
00002c e1f8      	LDI  R31,0x18
00002d bdf1      	OUT  WDTCR,R31
00002e bde1      	OUT  WDTCR,R30
         
         ;CLEAR R2-R14
00002f e08d      	LDI  R24,13
000030 e0a2      	LDI  R26,2
000031 27bb      	CLR  R27
          __CLEAR_REG:
000032 93ed      	ST   X+,R30
000033 958a      	DEC  R24
000034 f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
000035 e080      	LDI  R24,LOW(0x400)
000036 e094      	LDI  R25,HIGH(0x400)
000037 e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
000038 93ed      	ST   X+,R30
000039 9701      	SBIW R24,1
00003a f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
00003b e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
00003d 9185      	LPM  R24,Z+
00003e 9195      	LPM  R25,Z+
00003f 9700      	SBIW R24,0
000040 f061      	BREQ __GLOBAL_INI_END
000041 91a5      	LPM  R26,Z+
000042 91b5      	LPM  R27,Z+
000043 9005      	LPM  R0,Z+
000044 9015      	LPM  R1,Z+
000045 01bf      	MOVW R22,R30
000046 01f0      	MOVW R30,R0
          __GLOBAL_INI_LOOP:
000047 9005      	LPM  R0,Z+
000048 920d      	ST   X+,R0
000049 9701      	SBIW R24,1
00004a f7e1      	BRNE __GLOBAL_INI_LOOP
00004b 01fb      	MOVW R30,R22
00004c cff0      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
00004d e5ef      	LDI  R30,LOW(0x45F)
00004e bfed      	OUT  SPL,R30
00004f e0e4      	LDI  R30,HIGH(0x45F)
000050 bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
000051 e6c0      	LDI  R28,LOW(0x160)
000052 e0d1      	LDI  R29,HIGH(0x160)
         
000053 c392      	RJMP _main
         
          	.ESEG
          	.ORG 0
          	.DB  0 ; FIRST EEPROM LOCATION NOT USED, SEE ATMEL ERRATA SHEETS
000000 00
         
          	.DSEG
          	.ORG 0x160
         ;       1 //#define DEBUG
         ;       2 #define RELEASE
         ;       3 #define MIN_U	100
         ;       4 
         ;       5 #define SIBHOLOD
         ;       6 //#define TRIADA
         ;       7 
         ;       8 
         ;       9 #include <Mega8.h>
         ;      10 #include <delay.h> 
         ;      11 
         ;      12 #ifdef DEBUG
         ;      13 #include "usart.c"
         ;      14 #include "cmd.c"
         ;      15 #include <stdio.h>
         ;      16 #endif
         ;      17 
         ;      18 
         ;      19 #ifdef DEBUG
         ;      20 #define LED_NET PORTB.0
         ;      21 #define LED_PER PORTB.1
         ;      22 #define LED_DEL PORTB.2
         ;      23 #define KL1 PORTB.7
         ;      24 #define KL2 PORTB.6
         ;      25 #endif
         ;      26 
         ;      27 #ifdef RELEASE
         ;      28 #define LED_NET PORTD.0
         ;      29 #define LED_PER PORTD.1
         ;      30 #define LED_DEL PORTD.2
         ;      31 #define KL2 PORTD.3
         ;      32 #define KL1 PORTD.4
         ;      33 #endif
         ;      34 
         ;      35 bit bT0;
         ;      36 bit b100Hz;
         ;      37 bit b10Hz;
         ;      38 bit b5Hz;
         ;      39 bit b2Hz;
         ;      40 bit b1Hz;
         ;      41 bit n_but;
         ;      42 
         ;      43 char t0_cnt0,t0_cnt1,t0_cnt2,t0_cnt3,t0_cnt4;
         ;      44 unsigned int bankA,bankB,bankC;
          _bankC:
000160      	.BYTE 0x2
         ;      45 unsigned int adc_bankU[3][25],ADCU,adc_bankU_[3];
          _adc_bankU:
000162      	.BYTE 0x96
          _ADCU:
0001f8      	.BYTE 0x2
          _adc_bankU_:
0001fa      	.BYTE 0x6
         ;      46 unsigned int del_cnt;
          _del_cnt:
000200      	.BYTE 0x2
         ;      47 char flags;
         ;      48 char deltas;
          _deltas:
000202      	.BYTE 0x1
         ;      49 char adc_cntA,adc_cntB,adc_cntC;
          _adc_cntA:
000203      	.BYTE 0x1
          _adc_cntB:
000204      	.BYTE 0x1
          _adc_cntC:
000205      	.BYTE 0x1
         ;      50 bit bA_,bB_,bC_;
         ;      51 bit bA,bB,bC;
         ;      52 unsigned int adc_data;
          _adc_data:
000206      	.BYTE 0x2
         ;      53 char cnt_x;
          _cnt_x:
000208      	.BYTE 0x1
         ;      54 char cher[3]={5,6,7};
          _cher:
000209      	.BYTE 0x3
         ;      55 int cher_cnt=25; 
          _cher_cnt:
00020c      	.BYTE 0x2
         ;      56 char reset_cnt=25;
          _reset_cnt:
00020e      	.BYTE 0x1
         ;      57 char pcnt[3];
          _pcnt:
00020f      	.BYTE 0x3
         ;      58 bit bPER,bPER_,bCHER_;
         ;      59 bit bNN,bNN_;
         ;      60 enum char {iMn,iSet}ind;
          _ind:
000212      	.BYTE 0x1
         ;      61 bit bFl;
         ;      62 eeprom char delta; 
         
          	.ESEG
          _delta:
          	.DB  0x0
000001 00
         ;      63 char cnt_butS,cnt_butR; 
         
          	.DSEG
          _cnt_butS:
000213      	.BYTE 0x1
          _cnt_butR:
000214      	.BYTE 0x1
         ;      64 bit butR,butS;
         ;      65 flash char DF[]={0,10,15,20,25,30,35};
         
          	.CSEG
         ;      66 char per_cnt;
         
          	.DSEG
          _per_cnt:
000215      	.BYTE 0x1
         ;      67 char nn_cnt;
          _nn_cnt:
000216      	.BYTE 0x1
         ;      68 //-----------------------------------------------
         ;      69 void t0_init(void)
         ;      70 {
         
          	.CSEG
          _t0_init:
         ;      71 TCCR0=0x03;
000054 e0e3      	LDI  R30,LOW(3)
000055 bfe3      	OUT  0x33,R30
         ;      72 TCNT0=-78;
000056 ebe2      	LDI  R30,LOW(178)
000057 bfe2      	OUT  0x32,R30
         ;      73 TIMSK|=0b00000001;
000058 b7e9      	IN   R30,0x39
000059 60e1      	ORI  R30,1
00005a bfe9      	OUT  0x39,R30
         ;      74 } 
00005b 9508      	RET
         ;      75 
         ;      76 //-----------------------------------------------
         ;      77 void t2_init(void)
         ;      78 {
          _t2_init:
         ;      79 //TIFR|=0b01000000;
         ;      80 TCNT2=-97;
00005c e9ef      	LDI  R30,LOW(159)
00005d bde4      	OUT  0x24,R30
         ;      81 TCCR2=0x07;
00005e e0e7      	LDI  R30,LOW(7)
00005f bde5      	OUT  0x25,R30
         ;      82 OCR2=-80;
000060 ebe0      	LDI  R30,LOW(176)
000061 bde3      	OUT  0x23,R30
         ;      83 TIMSK|=0b11000000;
000062 b7e9      	IN   R30,0x39
000063 6ce0      	ORI  R30,LOW(0xC0)
000064 bfe9      	OUT  0x39,R30
         ;      84 }  
000065 9508      	RET
         ;      85 
         ;      86 //-----------------------------------------------
         ;      87 void del_init(void)
         ;      88 {
          _del_init:
         ;      89 if(!del_cnt)
000066 d3b9      	RCALL SUBOPT_0x0
000067 f431      	BRNE _0x6
         ;      90 	{
         ;      91 #ifdef SIBHOLOD
         ;      92 	del_cnt=300;
000068 e2ec      	LDI  R30,LOW(300)
000069 e0f1      	LDI  R31,HIGH(300)
00006a 93e0 0200 	STS  _del_cnt,R30
00006c 93f0 0201 	STS  _del_cnt+1,R31
         ;      93 #endif
         ;      94 
         ;      95 #ifdef TRIADA
         ;      96 	del_cnt=3;
         ;      97 #endif
         ;      98 	}
         ;      99 } 
          _0x6:
00006e 9508      	RET
         ;     100 
         ;     101 //-----------------------------------------------
         ;     102 void del_hndl(void)
         ;     103 {
          _del_hndl:
         ;     104 if((del_cnt)&&(!bCHER_)) del_cnt--;
00006f d3b0      	RCALL SUBOPT_0x0
000070 f011      	BREQ _0x8
000071 fe37      	SBRS R3,7
000072 c001      	RJMP _0x9
          _0x8:
000073 c009      	RJMP _0x7
          _0x9:
000074 91e0 0200 	LDS  R30,_del_cnt
000076 91f0 0201 	LDS  R31,_del_cnt+1
000078 9731      	SBIW R30,1
000079 93e0 0200 	STS  _del_cnt,R30
00007b 93f0 0201 	STS  _del_cnt+1,R31
         ;     105 } 
          _0x7:
00007d 9508      	RET
         ;     106 
         ;     107 //-----------------------------------------------
         ;     108 void ind_hndl(void)
         ;     109 {
          _ind_hndl:
         ;     110 #ifdef DEBUG
         ;     111 DDRB|=0x07;
         ;     112 #endif
         ;     113 
         ;     114 #ifdef RELEASE
         ;     115 DDRD|=0x07;   
00007e b3e1      	IN   R30,0x11
00007f 60e7      	ORI  R30,LOW(0x7)
000080 bbe1      	OUT  0x11,R30
         ;     116 #endif
         ;     117  
         ;     118 if(ind==iMn)
000081 d3a4      	RCALL SUBOPT_0x1
000082 f4e1      	BRNE _0xA
         ;     119 	{
         ;     120 	if(bCHER_)
000083 fe37      	SBRS R3,7
000084 c005      	RJMP _0xB
         ;     121 		{
         ;     122 		LED_NET=bFl;
000085 fa42      	BST  R4,2
000086 b3e2      	IN   R30,0x12
000087 f9e0      	BLD  R30,0
000088 bbe2      	OUT  0x12,R30
         ;     123 		}
         ;     124 	else LED_NET=0;
000089 c001      	RJMP _0xC
          _0xB:
00008a 9890      	CBI  0x12,0
          _0xC:
         ;     125 	
         ;     126 	if(del_cnt||bCHER_)
00008b d394      	RCALL SUBOPT_0x0
00008c f411      	BRNE _0xE
00008d fe37      	SBRS R3,7
00008e c002      	RJMP _0xD
          _0xE:
         ;     127 		{
         ;     128 		LED_DEL=0;
00008f 9892      	CBI  0x12,2
         ;     129 		}
         ;     130 	else LED_DEL=1;
000090 c001      	RJMP _0x10
          _0xD:
000091 9a92      	SBI  0x12,2
          _0x10:
         ;     131 
         ;     132 	if(bNN_)
000092 fe41      	SBRS R4,1
000093 c005      	RJMP _0x11
         ;     133 		{
         ;     134 		LED_PER=bFl;
000094 fa42      	BST  R4,2
000095 b3e2      	IN   R30,0x12
000096 f9e1      	BLD  R30,1
000097 bbe2      	OUT  0x12,R30
         ;     135 		}
         ;     136 
         ;     137 	else if(bPER)
000098 c005      	RJMP _0x12
          _0x11:
000099 fe35      	SBRS R3,5
00009a c002      	RJMP _0x13
         ;     138 		{
         ;     139 		LED_PER=0;
00009b 9891      	CBI  0x12,1
         ;     140 		}		
         ;     141 
         ;     142 	else LED_PER=1;	
00009c c001      	RJMP _0x14
          _0x13:
00009d 9a91      	SBI  0x12,1
          _0x14:
          _0x12:
         ;     143 				
         ;     144 	}
         ;     145 else if(ind==iSet)
00009e c012      	RJMP _0x15
          _0xA:
00009f d38a      	RCALL SUBOPT_0x2
0000a0 f481      	BRNE _0x16
         ;     146 	{
         ;     147 	#ifdef DEBUG 
         ;     148 	if(bFl) PORTB|=0x07;
         ;     149 	else PORTB&=(delta^0xff)|0xf8;
         ;     150 	#endif
         ;     151 	
         ;     152 	#ifdef RELEASE 
         ;     153 	if(bFl) PORTD|=0x07;
0000a1 fe42      	SBRS R4,2
0000a2 c003      	RJMP _0x17
0000a3 b3e2      	IN   R30,0x12
0000a4 60e7      	ORI  R30,LOW(0x7)
0000a5 c00a      	RJMP _0x9C
         ;     154 	else PORTD&=(delta^0xff)|0xf8;
          _0x17:
0000a6 b3e2      	IN   R30,0x12
0000a7 93ef      	PUSH R30
0000a8 e0a1      	LDI  R26,LOW(_delta)
0000a9 e0b0      	LDI  R27,HIGH(_delta)
0000aa d4af      	RCALL __EEPROMRDB
0000ab efaf      	LDI  R26,LOW(255)
0000ac 27ea      	EOR  R30,R26
0000ad 6fe8      	ORI  R30,LOW(0xF8)
0000ae 91af      	POP  R26
0000af 23ea      	AND  R30,R26
          _0x9C:
0000b0 bbe2      	OUT  0x12,R30
         ;     155 	#endif
         ;     156 	
         ;     157 	}	
         ;     158 }
          _0x16:
          _0x15:
0000b1 9508      	RET
         ;     159 
         ;     160 //-----------------------------------------------
         ;     161 void out_out(void)
         ;     162 {
          _out_out:
         ;     163 #ifdef DEBUG
         ;     164 DDRB|=0xc0;   
         ;     165 #endif
         ;     166 
         ;     167 #ifdef RELEASE
         ;     168 DDRD|=0x18;   
0000b2 b3e1      	IN   R30,0x11
0000b3 61e8      	ORI  R30,LOW(0x18)
0000b4 bbe1      	OUT  0x11,R30
         ;     169 #endif    
         ;     170 
         ;     171 if((!del_cnt)&&(!bPER_)&&(!bCHER_)&&(!bNN_))
0000b5 d36a      	RCALL SUBOPT_0x0
0000b6 f431      	BRNE _0x1A
0000b7 fc36      	SBRC R3,6
0000b8 c004      	RJMP _0x1A
0000b9 fc37      	SBRC R3,7
0000ba c002      	RJMP _0x1A
0000bb fe41      	SBRS R4,1
0000bc c001      	RJMP _0x1B
          _0x1A:
0000bd c004      	RJMP _0x19
          _0x1B:
         ;     172 	{
         ;     173 	KL1=1;
0000be 9a94      	SBI  0x12,4
         ;     174 	flags|=0x02;
0000bf 2dee      	MOV  R30,R14
0000c0 60e2      	ORI  R30,2
0000c1 c003      	RJMP _0x9D
         ;     175 	}
         ;     176 else 
          _0x19:
         ;     177 	{
         ;     178 	KL1=0;
0000c2 9894      	CBI  0x12,4
         ;     179 	flags&=0xfD;
0000c3 2dee      	MOV  R30,R14
0000c4 7fed      	ANDI R30,0xFD
          _0x9D:
0000c5 2eee      	MOV  R14,R30
         ;     180 	}	
         ;     181 	
         ;     182 if((!bPER_)&&(!bCHER_)&&(!bNN_))
0000c6 fc36      	SBRC R3,6
0000c7 c004      	RJMP _0x1E
0000c8 fc37      	SBRC R3,7
0000c9 c002      	RJMP _0x1E
0000ca fe41      	SBRS R4,1
0000cb c001      	RJMP _0x1F
          _0x1E:
0000cc c004      	RJMP _0x1D
          _0x1F:
         ;     183 	{
         ;     184 	KL2=1;
0000cd 9a93      	SBI  0x12,3
         ;     185 	flags|=0x08;
0000ce 2dee      	MOV  R30,R14
0000cf 60e8      	ORI  R30,8
0000d0 c003      	RJMP _0x9E
         ;     186 	}
         ;     187 else 
          _0x1D:
         ;     188 	{
         ;     189 	KL2=0;
0000d1 9893      	CBI  0x12,3
         ;     190 	flags&=0xf7;
0000d2 2dee      	MOV  R30,R14
0000d3 7fe7      	ANDI R30,0XF7
          _0x9E:
0000d4 2eee      	MOV  R14,R30
         ;     191 	}		
         ;     192 }
0000d5 9508      	RET
         ;     193 
         ;     194 //-----------------------------------------------
         ;     195 void per_drv(void)
         ;     196 {
          _per_drv:
         ;     197 char max_,min_;
         ;     198 signed long temp_SL;
         ;     199 if((adc_bankU_[0]>=adc_bankU_[1])&&(adc_bankU_[0]>=adc_bankU_[2])) max_=0; 
0000d6 9724      	SBIW R28,4
0000d7 d49d      	RCALL __SAVELOCR2
         ;	max_ -> R16
         ;	min_ -> R17
         ;	temp_SL -> Y+2
0000d8   +  	__GETW1MN _adc_bankU_,2
0000dc d351      	RCALL SUBOPT_0x3
0000dd f030      	BRLO _0x22
0000de   +  	__GETW1MN _adc_bankU_,4
0000e2 d34b      	RCALL SUBOPT_0x3
0000e3 f408      	BRSH _0x23
          _0x22:
0000e4 c002      	RJMP _0x21
          _0x23:
0000e5 e000      	LDI  R16,LOW(0)
         ;     200 else if(adc_bankU_[1]>=adc_bankU_[2]) max_=1; 
0000e6 c012      	RJMP _0x24
          _0x21:
0000e7   +  	__GETW1MN _adc_bankU_,2
0000eb 93ff      	PUSH R31
0000ec 93ef      	PUSH R30
0000ed   +  	__GETW1MN _adc_bankU_,4
0000f1 91af      	POP  R26
0000f2 91bf      	POP  R27
0000f3 17ae      	CP   R26,R30
0000f4 07bf      	CPC  R27,R31
0000f5 f010      	BRLO _0x25
0000f6 e001      	LDI  R16,LOW(1)
         ;     201 else max_=2;  
0000f7 c001      	RJMP _0x26
          _0x25:
0000f8 e002      	LDI  R16,LOW(2)
          _0x26:
          _0x24:
         ;     202 
         ;     203 if((adc_bankU_[0]<=adc_bankU_[1])&&(adc_bankU_[0]<=adc_bankU_[2])) min_=0; 
0000f9   +  	__GETW1MN _adc_bankU_,2
0000fd d337      	RCALL SUBOPT_0x4
0000fe f030      	BRLO _0x28
0000ff   +  	__GETW1MN _adc_bankU_,4
000103 d331      	RCALL SUBOPT_0x4
000104 f408      	BRSH _0x29
          _0x28:
000105 c002      	RJMP _0x27
          _0x29:
000106 e010      	LDI  R17,LOW(0)
         ;     204 else if(adc_bankU_[1]<=adc_bankU_[2]) min_=1; 
000107 c012      	RJMP _0x2A
          _0x27:
000108   +  	__GETW1MN _adc_bankU_,2
00010c 93ff      	PUSH R31
00010d 93ef      	PUSH R30
00010e   +  	__GETW1MN _adc_bankU_,4
000112 91af      	POP  R26
000113 91bf      	POP  R27
000114 17ea      	CP   R30,R26
000115 07fb      	CPC  R31,R27
000116 f010      	BRLO _0x2B
000117 e011      	LDI  R17,LOW(1)
         ;     205 else min_=2; 
000118 c001      	RJMP _0x2C
          _0x2B:
000119 e012      	LDI  R17,LOW(2)
          _0x2C:
          _0x2A:
         ;     206 
         ;     207 temp_SL=adc_bankU_[max_]*(long)DF[delta]/100;
00011a d321      	RCALL SUBOPT_0x5
00011b 93ff      	PUSH R31
00011c 93ef      	PUSH R30
00011d e2ee      	LDI  R30,LOW(_DF*2)
00011e e0f0      	LDI  R31,HIGH(_DF*2)
00011f 93ff      	PUSH R31
000120 93ef      	PUSH R30
000121 e0a1      	LDI  R26,LOW(_delta)
000122 e0b0      	LDI  R27,HIGH(_delta)
000123 d436      	RCALL __EEPROMRDB
000124 91af      	POP  R26
000125 91bf      	POP  R27
000126 e0f0      	LDI  R31,0
000127 0fea      	ADD  R30,R26
000128 1ffb      	ADC  R31,R27
000129 91e4      	LPM  R30,Z
00012a 27ff      	CLR  R31
00012b 2766      	CLR  R22
00012c 2777      	CLR  R23
00012d 91af      	POP  R26
00012e 91bf      	POP  R27
00012f 2788      	CLR  R24
000130 2799      	CLR  R25
000131 d3cb      	RCALL __MULD12
000132 01df      	MOVW R26,R30
000133 01cb      	MOVW R24,R22
000134   +  	__GETD1N 0x64
000138 d402      	RCALL __DIVD21
000139   +  	__PUTD1S 2
         ;     208 if((adc_bankU_[max_]-adc_bankU_[min_])>=(int)temp_SL)
00013d d2fe      	RCALL SUBOPT_0x5
00013e 93ff      	PUSH R31
00013f 93ef      	PUSH R30
000140 2fe1      	MOV  R30,R17
000141 efaa      	LDI  R26,LOW(_adc_bankU_)
000142 e0b1      	LDI  R27,HIGH(_adc_bankU_)
000143 d302      	RCALL SUBOPT_0x6
000144 d305      	RCALL SUBOPT_0x7
000145 91af      	POP  R26
000146 91bf      	POP  R27
000147 1bae      	SUB  R26,R30
000148 0bbf      	SBC  R27,R31
000149 81ea      	LDD  R30,Y+2
00014a 81fb      	LDD  R31,Y+2+1
00014b 17ae      	CP   R26,R30
00014c 07bf      	CPC  R27,R31
00014d f02c      	BRLT _0x2D
         ;     209 	{
         ;     210 	bPER=1;
00014e 9468      	SET
00014f f835      	BLD  R3,5
         ;     211 
         ;     212 	flags|=0x01;
000150 2dee      	MOV  R30,R14
000151 60e1      	ORI  R30,1
000152 c004      	RJMP _0x9F
         ;     213 	}      
         ;     214 else
          _0x2D:
         ;     215 	{
         ;     216 	bPER=0;   
000153 94e8      	CLT
000154 f835      	BLD  R3,5
         ;     217 
         ;     218 	flags&=0xfe;
000155 2dee      	MOV  R30,R14
000156 7fee      	ANDI R30,0xFE
          _0x9F:
000157 2eee      	MOV  R14,R30
         ;     219 	}
         ;     220 //	bPER=0;	
         ;     221 }
000158 d41f      	RCALL __LOADLOCR2
000159 9626      	ADIW R28,6
00015a 9508      	RET
         ;     222 
         ;     223 //-----------------------------------------------
         ;     224 void nn_drv(void)
         ;     225 {
          _nn_drv:
         ;     226 if((adc_bankU_[0]<=MIN_U)&&(adc_bankU_[1]<=MIN_U)&&(adc_bankU_[2]<=MIN_U))
00015b 91a0 01fa 	LDS  R26,_adc_bankU_
00015d 91b0 01fb 	LDS  R27,_adc_bankU_+1
00015f d2ee      	RCALL SUBOPT_0x8
000160 f060      	BRLO _0x30
000161   +  	__GETW2MN _adc_bankU_,2
000165 d2e8      	RCALL SUBOPT_0x8
000166 f030      	BRLO _0x30
000167   +  	__GETW2MN _adc_bankU_,4
00016b d2e2      	RCALL SUBOPT_0x8
00016c f408      	BRSH _0x31
          _0x30:
00016d c003      	RJMP _0x2F
          _0x31:
         ;     227 	{
         ;     228 	bNN=1;
00016e 9468      	SET
00016f f840      	BLD  R4,0
         ;     229 	}      
         ;     230 else
000170 c002      	RJMP _0x32
          _0x2F:
         ;     231 	{
         ;     232 	bNN=0;   
000171 94e8      	CLT
000172 f840      	BLD  R4,0
         ;     233 	}
          _0x32:
         ;     234 }
000173 9508      	RET
         ;     235 
         ;     236 //-----------------------------------------------
         ;     237 void per_hndl(void)
         ;     238 {
          _per_hndl:
         ;     239 if(!bPER)
000174 fc35      	SBRC R3,5
000175 c009      	RJMP _0x33
         ;     240 	{
         ;     241 	per_cnt=0;
000176 e0e0      	LDI  R30,LOW(0)
000177 93e0 0215 	STS  _per_cnt,R30
         ;     242 	bPER_=0;
000179 94e8      	CLT
00017a f836      	BLD  R3,6
         ;     243 	flags&=0xfB;
00017b 2dee      	MOV  R30,R14
00017c 7feb      	ANDI R30,0xFB
00017d 2eee      	MOV  R14,R30
         ;     244 	}
         ;     245 else
00017e c00f      	RJMP _0x34
          _0x33:
         ;     246 	{
         ;     247 	if(per_cnt<5)
00017f 91a0 0215 	LDS  R26,_per_cnt
000181 30a5      	CPI  R26,LOW(0x5)
000182 f458      	BRSH _0x35
         ;     248 		{
         ;     249 		if(++per_cnt>=5)
000183 5faf      	SUBI R26,-LOW(1)
000184 93a0 0215 	STS  _per_cnt,R26
000186 30a5      	CPI  R26,LOW(0x5)
000187 f030      	BRLO _0x36
         ;     250 			{
         ;     251 			bPER_=1;
000188 9468      	SET
000189 f836      	BLD  R3,6
         ;     252 			flags|=0x04;
00018a 2dee      	MOV  R30,R14
00018b 60e4      	ORI  R30,4
00018c 2eee      	MOV  R14,R30
         ;     253 			del_init();
00018d ded8      	RCALL _del_init
         ;     254 			}
         ;     255 		}
          _0x36:
         ;     256 	}	
          _0x35:
          _0x34:
         ;     257 }
00018e 9508      	RET
         ;     258 
         ;     259 //-----------------------------------------------
         ;     260 void nn_hndl(void)
         ;     261 {
          _nn_hndl:
         ;     262 if(!bNN)
00018f fc40      	SBRC R4,0
000190 c006      	RJMP _0x37
         ;     263 	{
         ;     264 	nn_cnt=0;
000191 e0e0      	LDI  R30,LOW(0)
000192 93e0 0216 	STS  _nn_cnt,R30
         ;     265 	bNN_=0;
000194 94e8      	CLT
000195 f841      	BLD  R4,1
         ;     266 	
         ;     267 	}
         ;     268 else
000196 c00c      	RJMP _0x38
          _0x37:
         ;     269 	{
         ;     270 	if(nn_cnt<5)
000197 91a0 0216 	LDS  R26,_nn_cnt
000199 30a5      	CPI  R26,LOW(0x5)
00019a f440      	BRSH _0x39
         ;     271 		{
         ;     272 		if(++nn_cnt>=5)
00019b 5faf      	SUBI R26,-LOW(1)
00019c 93a0 0216 	STS  _nn_cnt,R26
00019e 30a5      	CPI  R26,LOW(0x5)
00019f f018      	BRLO _0x3A
         ;     273 			{
         ;     274 			bNN_=1;
0001a0 9468      	SET
0001a1 f841      	BLD  R4,1
         ;     275 			del_init();
0001a2 dec3      	RCALL _del_init
         ;     276 			}
         ;     277 		}
          _0x3A:
         ;     278 	}	
          _0x39:
          _0x38:
         ;     279 }
0001a3 9508      	RET
         ;     280 
         ;     281 //-----------------------------------------------
         ;     282 void pcnt_hndl(void)
         ;     283 {
          _pcnt_hndl:
         ;     284 if(pcnt[0])
0001a4 d2ae      	RCALL SUBOPT_0x9
0001a5 f031      	BREQ _0x3B
         ;     285 	{
         ;     286 	pcnt[0]--;
0001a6 e0af      	LDI  R26,LOW(_pcnt)
0001a7 e0b2      	LDI  R27,HIGH(_pcnt)
0001a8 d2ae      	RCALL SUBOPT_0xA
         ;     287 	if(pcnt[0]==0) adc_bankU_[0]=0;
0001a9 d2a9      	RCALL SUBOPT_0x9
0001aa f409      	BRNE _0x3C
0001ab d2af      	RCALL SUBOPT_0xB
         ;     288 	}
          _0x3C:
         ;     289 if(pcnt[1])
          _0x3B:
0001ac   +  	__GETB1MN _pcnt,1
0001ae 30e0      	CPI  R30,0
0001af f069      	BREQ _0x3D
         ;     290 	{
         ;     291 	pcnt[1]--;
0001b0   +  	__POINTW2MN _pcnt,1
0001b2 d2a4      	RCALL SUBOPT_0xA
         ;     292 	if(pcnt[1]==0) adc_bankU_[1]=0;
0001b3   +  	__GETB1MN _pcnt,1
0001b5 30e0      	CPI  R30,0
0001b6 f431      	BRNE _0x3E
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 e0f0      	LDI  R31,HIGH(0)
0001b9   +  	__PUTW1MN _adc_bankU_,2
         ;     293 	}
          _0x3E:
         ;     294 if(pcnt[2])
          _0x3D:
0001bd   +  	__GETB1MN _pcnt,2
0001bf 30e0      	CPI  R30,0
0001c0 f069      	BREQ _0x3F
         ;     295 	{
         ;     296 	pcnt[2]--;
0001c1   +  	__POINTW2MN _pcnt,2
0001c3 d293      	RCALL SUBOPT_0xA
         ;     297 	if(pcnt[2]==0) adc_bankU_[2]=0;
0001c4   +  	__GETB1MN _pcnt,2
0001c6 30e0      	CPI  R30,0
0001c7 f431      	BRNE _0x40
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 e0f0      	LDI  R31,HIGH(0)
0001ca   +  	__PUTW1MN _adc_bankU_,4
         ;     298 	}		
          _0x40:
         ;     299 }
          _0x3F:
0001ce 9508      	RET
         ;     300 
         ;     301 //-----------------------------------------------
         ;     302 void gran_char(signed char *adr, signed char min, signed char max)
         ;     303 {
         ;     304 if (*adr<min) *adr=min;
         ;     305 if (*adr>max) *adr=max; 
         ;     306 } 
         ;     307 
         ;     308 
         ;     309 #ifdef DEBUG
         ;     310 
         ;     311 
         ;     312 
         ;     313 //-----------------------------------------------
         ;     314 char index_offset (signed char index,signed char offset)
         ;     315 {
         ;     316 index=index+offset;
         ;     317 if(index>=RX_BUFFER_SIZE) index-=RX_BUFFER_SIZE; 
         ;     318 if(index<0) index+=RX_BUFFER_SIZE;
         ;     319 return index;
         ;     320 }
         ;     321 
         ;     322 //-----------------------------------------------
         ;     323 char control_check(char index)
         ;     324 {
         ;     325 char i=0,ii=0,iii;
         ;     326 
         ;     327 if(rx_buffer[index]!=END) goto error_cc;
         ;     328 
         ;     329 ii=rx_buffer[index_offset(index,-2)];
         ;     330 iii=0;
         ;     331 for(i=0;i<=ii;i++)
         ;     332 	{
         ;     333 	iii^=rx_buffer[index_offset(index,-2-ii+i)];
         ;     334 	}
         ;     335 if (iii!=rx_buffer[index_offset(index,-1)]) goto error_cc;	
         ;     336 
         ;     337 
         ;     338 success_cc:
         ;     339 return 1;
         ;     340 goto end_cc;
         ;     341 error_cc:
         ;     342 return 0;
         ;     343 goto end_cc;
         ;     344 
         ;     345 end_cc:
         ;     346 }
         ;     347 
         ;     348 
         ;     349 //-----------------------------------------------
         ;     350 void OUT (char num,char data0,char data1,char data2,char data3,char data4,char data5)
         ;     351 {
         ;     352 char i,t=0;
         ;     353 //char *ptr=&data1;
         ;     354 char UOB[6]; 
         ;     355 UOB[0]=data0;
         ;     356 UOB[1]=data1;
         ;     357 UOB[2]=data2;
         ;     358 UOB[3]=data3;
         ;     359 UOB[4]=data4;
         ;     360 UOB[5]=data5;
         ;     361 for (i=0;i<num;i++)
         ;     362 	{
         ;     363 	t^=UOB[i];
         ;     364 	}    
         ;     365 UOB[num]=num;
         ;     366 t^=UOB[num];
         ;     367 UOB[num+1]=t;
         ;     368 UOB[num+2]=END;
         ;     369 
         ;     370 for (i=0;i<num+3;i++)
         ;     371 	{
         ;     372 	putchar(UOB[i]);
         ;     373 	}   	
         ;     374 }
         ;     375 
         ;     376 //-----------------------------------------------
         ;     377 void OUT_adr (char *ptr, char len)
         ;     378 {
         ;     379 char UOB[20]={0,0,0,0,0,0,0,0,0,0};
         ;     380 char i,t=0;
         ;     381 
         ;     382 for(i=0;i<len;i++)
         ;     383 	{
         ;     384 	UOB[i]=ptr[i];
         ;     385 	t^=UOB[i];
         ;     386 	}
         ;     387 //if(!t)t=0xff;
         ;     388 UOB[len]=len;
         ;     389 t^=len;	
         ;     390 UOB[len+1]=t;	
         ;     391 UOB[len+2]=END;
         ;     392 //UOB[0]=i+1;
         ;     393 //UOB[i]=t^UOB[0];
         ;     394 //UOB[i+1]=END;
         ;     395 	
         ;     396 //puts(UOB); 
         ;     397 for (i=0;i<len+3;i++)
         ;     398 	{
         ;     399 	putchar(UOB[i]);
         ;     400 	}   
         ;     401 }
         ;     402 
         ;     403 //-----------------------------------------------
         ;     404 void UART_IN_AN(void)
         ;     405 {
         ;     406 char temp_char;
         ;     407 int temp_int;
         ;     408 signed long int temp_intL;
         ;     409 
         ;     410 if((UIB[0]==CMND)&&(UIB[1]==QWEST))
         ;     411 	{
         ;     412 
         ;     413 	}
         ;     414 else if((UIB[0]==CMND)&&(UIB[1]==GETID))
         ;     415 	{
         ;     416 
         ;     417           
         ;     418 	}	
         ;     419 
         ;     420 }
         ;     421 
         ;     422 //-----------------------------------------------
         ;     423 void UART_IN(void)
         ;     424 {
         ;     425 //static char flag;
         ;     426 char temp,i,count;
         ;     427 if(!bRXIN) goto UART_IN_end;
         ;     428 #asm("cli")
         ;     429 //char* ptr;
         ;     430 //char i=0,t=0;
         ;     431 //int it=0;
         ;     432 //signed long int char_int;
         ;     433 //if(!bRXIN) goto UART_IN_end;
         ;     434 //bRXIN=0;
         ;     435 //count=rx_counter;
         ;     436 //OUT(0x01,0,0,0,0,0);
         ;     437 if(rx_buffer_overflow)
         ;     438 	{
         ;     439 	rx_wr_index=0;
         ;     440 	rx_rd_index=0;
         ;     441 	rx_counter=0;
         ;     442 	rx_buffer_overflow=0;
         ;     443 	}    
         ;     444 	
         ;     445 if(rx_counter&&(rx_buffer[index_offset(rx_wr_index,-1)])==END)
         ;     446 	{
         ;     447      temp=rx_buffer[index_offset(rx_wr_index,-3)];
         ;     448     	if(temp<10) 
         ;     449     		{
         ;     450     		if(control_check(index_offset(rx_wr_index,-1)))
         ;     451     			{
         ;     452     			rx_rd_index=index_offset(rx_wr_index,-3-temp);
         ;     453     			for(i=0;i<temp;i++)
         ;     454 				{
         ;     455 				UIB[i]=rx_buffer[index_offset(rx_rd_index,i)];
         ;     456 				} 
         ;     457 			rx_rd_index=rx_wr_index;
         ;     458 			rx_counter=0;
         ;     459 			UART_IN_AN();
         ;     460 
         ;     461     			}
         ;     462  	
         ;     463     		} 
         ;     464     	}	
         ;     465 
         ;     466 UART_IN_end:
         ;     467 bRXIN=0;
         ;     468 #asm("sei")     
         ;     469 } 
         ;     470 
         ;     471 #endif
         ;     472 
         ;     473     
         ;     474  
         ;     475 
         ;     476 
         ;     477 
         ;     478 
         ;     479 
         ;     480 
         ;     481 //-----------------------------------------------
         ;     482 void led_hndl(void)
         ;     483 {
         ;     484 
         ;     485 }
         ;     486 
         ;     487 
         ;     488 
         ;     489 //-----------------------------------------------
         ;     490 void but_drv(void)
         ;     491 {
          _but_drv:
         ;     492 #ifdef DEBUG
         ;     493 #define PINR PIND.2
         ;     494 #define PORTR PORTD.2
         ;     495 #define DDR DDRD.2
         ;     496 
         ;     497 #define PINS PIND.3
         ;     498 #define PORTS PORTD.3
         ;     499 #define DDS DDRD.3
         ;     500 #endif
         ;     501 
         ;     502 #ifdef RELEASE
         ;     503 #define PINR PINC.4
         ;     504 #define PORTR PORTC.4
         ;     505 #define DDR DDRC.4
         ;     506 
         ;     507 #define PINS PINC.5
         ;     508 #define PORTS PORTC.5
         ;     509 #define DDS DDRC.5
         ;     510 #endif
         ;     511 
         ;     512 
         ;     513 DDR=0;
0001cf 98a4      	CBI  0x14,4
         ;     514 DDS=0;
0001d0 98a5      	CBI  0x14,5
         ;     515 PORTR=1;
0001d1 9aac      	SBI  0x15,4
         ;     516 PORTS=1; 
0001d2 9aad      	SBI  0x15,5
         ;     517       
         ;     518 if(!PINR)
0001d3 999c      	SBIC 0x13,4
0001d4 c00c      	RJMP _0x43
         ;     519 	{
         ;     520 	if(cnt_butR<10)
0001d5 91a0 0214 	LDS  R26,_cnt_butR
0001d7 30aa      	CPI  R26,LOW(0xA)
0001d8 f438      	BRSH _0x44
         ;     521 		{
         ;     522 		if(++cnt_butR>=10)
0001d9 5faf      	SUBI R26,-LOW(1)
0001da 93a0 0214 	STS  _cnt_butR,R26
0001dc 30aa      	CPI  R26,LOW(0xA)
0001dd f010      	BRLO _0x45
         ;     523 			{
         ;     524 			butR=1;
0001de 9468      	SET
0001df f843      	BLD  R4,3
         ;     525 			}
         ;     526 		}
          _0x45:
         ;     527 	}                 
          _0x44:
         ;     528 else 
0001e0 c005      	RJMP _0x46
          _0x43:
         ;     529 	{
         ;     530 	cnt_butR=0;
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 93e0 0214 	STS  _cnt_butR,R30
         ;     531 	butR=0;
0001e4 94e8      	CLT
0001e5 f843      	BLD  R4,3
         ;     532 	}	 
          _0x46:
         ;     533 	
         ;     534 if(!PINS)
0001e6 999d      	SBIC 0x13,5
0001e7 c00c      	RJMP _0x47
         ;     535 	{
         ;     536 	if(cnt_butS<200)
0001e8 91a0 0213 	LDS  R26,_cnt_butS
0001ea 3ca8      	CPI  R26,LOW(0xC8)
0001eb f438      	BRSH _0x48
         ;     537 		{
         ;     538 		if(++cnt_butS>=200)
0001ec 5faf      	SUBI R26,-LOW(1)
0001ed 93a0 0213 	STS  _cnt_butS,R26
0001ef 3ca8      	CPI  R26,LOW(0xC8)
0001f0 f010      	BRLO _0x49
         ;     539 			{
         ;     540 			butS=1;
0001f1 9468      	SET
0001f2 f844      	BLD  R4,4
         ;     541 			}
         ;     542 		}
          _0x49:
         ;     543 	}                 
          _0x48:
         ;     544 else 
0001f3 c005      	RJMP _0x4A
          _0x47:
         ;     545 	{
         ;     546 	cnt_butS=0;
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 93e0 0213 	STS  _cnt_butS,R30
         ;     547 	butS=0;
0001f7 94e8      	CLT
0001f8 f844      	BLD  R4,4
         ;     548 	}		
          _0x4A:
         ;     549 	           
         ;     550 }
0001f9 9508      	RET
         ;     551 
         ;     552 //-----------------------------------------------
         ;     553 void but_an(void)
         ;     554 {
          _but_an:
         ;     555 if(ind==iMn)
0001fa d22b      	RCALL SUBOPT_0x1
0001fb f479      	BRNE _0x4B
         ;     556 	{
         ;     557 	if(butS) ind=iSet;
0001fc fe44      	SBRS R4,4
0001fd c003      	RJMP _0x4C
0001fe e0e1      	LDI  R30,LOW(1)
0001ff 93e0 0212 	STS  _ind,R30
         ;     558 	if(butR)
          _0x4C:
000201 fe43      	SBRS R4,3
000202 c007      	RJMP _0x4D
         ;     559 		{
         ;     560 		if(del_cnt) del_cnt=0;
000203 d21c      	RCALL SUBOPT_0x0
000204 f029      	BREQ _0x4E
000205 e0e0      	LDI  R30,0
000206 93e0 0200 	STS  _del_cnt,R30
000208 93e0 0201 	STS  _del_cnt+1,R30
         ;     561 		}
          _0x4E:
         ;     562 	}
          _0x4D:
         ;     563 else if(ind==iSet)
00020a c016      	RJMP _0x4F
          _0x4B:
00020b d21e      	RCALL SUBOPT_0x2
00020c f4a1      	BRNE _0x50
         ;     564 	{            
         ;     565 	if(butR)
00020d fe43      	SBRS R4,3
00020e c010      	RJMP _0x51
         ;     566 		{
         ;     567 		if(delta<6) delta++;
00020f e0a1      	LDI  R26,LOW(_delta)
000210 e0b0      	LDI  R27,HIGH(_delta)
000211 d348      	RCALL __EEPROMRDB
000212 30e6      	CPI  R30,LOW(0x6)
000213 f438      	BRSH _0x52
000214 e0a1      	LDI  R26,LOW(_delta)
000215 e0b0      	LDI  R27,HIGH(_delta)
000216 d343      	RCALL __EEPROMRDB
000217 5fef      	SUBI R30,-LOW(1)
000218 d34d      	RCALL __EEPROMWRB
000219 50e1      	SUBI R30,LOW(1)
         ;     568 		else delta=1;
00021a c004      	RJMP _0x53
          _0x52:
00021b e0e1      	LDI  R30,LOW(1)
00021c e0a1      	LDI  R26,LOW(_delta)
00021d e0b0      	LDI  R27,HIGH(_delta)
00021e d347      	RCALL __EEPROMWRB
          _0x53:
         ;     569 		}
         ;     570 	if(butS) ind=iMn;	
          _0x51:
00021f fc44      	SBRC R4,4
000220 d241      	RCALL SUBOPT_0xC
         ;     571 	}
         ;     572 but_an_end:
          _0x50:
          _0x4F:
         ;     573 butR=0;
000221 94e8      	CLT
000222 f843      	BLD  R4,3
         ;     574 butS=0;
000223 94e8      	CLT
000224 f844      	BLD  R4,4
         ;     575 }
000225 9508      	RET
         ;     576 
         ;     577 
         ;     578 
         ;     579 
         ;     580 
         ;     581 
         ;     582 
         ;     583 
         ;     584 
         ;     585 
         ;     586 
         ;     587 //***********************************************
         ;     588 //***********************************************
         ;     589 //***********************************************
         ;     590 //***********************************************
         ;     591 interrupt [TIM0_OVF] void timer0_ovf_isr(void)
         ;     592 {
          _timer0_ovf_isr:
000226 d23f      	RCALL SUBOPT_0xD
         ;     593 t0_init();
000227 de2c      	RCALL _t0_init
         ;     594 bT0=!bT0;
000228 e0e1      	LDI  R30,LOW(1)
000229 262e      	EOR  R2,R30
         ;     595 
         ;     596 if(!bT0) goto lbl_000;
00022a fe20      	SBRS R2,0
00022b c020      	RJMP _0x57
         ;     597 b100Hz=1;
00022c 9468      	SET
00022d f821      	BLD  R2,1
         ;     598 if(++t0_cnt0>=10)
00022e 9453      	INC  R5
00022f e0ea      	LDI  R30,LOW(10)
000230 165e      	CP   R5,R30
000231 f028      	BRLO _0x58
         ;     599 	{
         ;     600 	t0_cnt0=0;
000232 2455      	CLR  R5
         ;     601 	b10Hz=1;
000233 9468      	SET
000234 f822      	BLD  R2,2
         ;     602 	bFl=!bFl;
000235 e0e4      	LDI  R30,LOW(4)
000236 264e      	EOR  R4,R30
         ;     603 
         ;     604 	} 
         ;     605 if(++t0_cnt1>=20)
          _0x58:
000237 9463      	INC  R6
000238 e1e4      	LDI  R30,LOW(20)
000239 166e      	CP   R6,R30
00023a f018      	BRLO _0x59
         ;     606 	{
         ;     607 	t0_cnt1=0;
00023b 2466      	CLR  R6
         ;     608 	b5Hz=1;
00023c 9468      	SET
00023d f823      	BLD  R2,3
         ;     609 
         ;     610 	}
         ;     611 if(++t0_cnt2>=50)
          _0x59:
00023e 9473      	INC  R7
00023f e3e2      	LDI  R30,LOW(50)
000240 167e      	CP   R7,R30
000241 f018      	BRLO _0x5A
         ;     612 	{
         ;     613 	t0_cnt2=0;
000242 2477      	CLR  R7
         ;     614 	b2Hz=1;
000243 9468      	SET
000244 f824      	BLD  R2,4
         ;     615 	}	
         ;     616 		
         ;     617 if(++t0_cnt3>=100)
          _0x5A:
000245 9483      	INC  R8
000246 e6e4      	LDI  R30,LOW(100)
000247 168e      	CP   R8,R30
000248 f018      	BRLO _0x5B
         ;     618 	{
         ;     619 	t0_cnt3=0;
000249 2488      	CLR  R8
         ;     620 	b1Hz=1;
00024a 9468      	SET
00024b f825      	BLD  R2,5
         ;     621 	}		
         ;     622 lbl_000:
          _0x5B:
          _0x57:
         ;     623 }
00024c d227      	RCALL SUBOPT_0xE
00024d 9518      	RETI
         ;     624 
         ;     625 //-----------------------------------------------
         ;     626 // Timer 2 output compare interrupt service routine
         ;     627 interrupt [TIM2_OVF] void timer2_ovf_isr(void)
         ;     628 {
          _timer2_ovf_isr:
00024e d217      	RCALL SUBOPT_0xD
         ;     629 t2_init();
00024f de0c      	RCALL _t2_init
         ;     630 
         ;     631 
         ;     632 
         ;     633 }
000250 d223      	RCALL SUBOPT_0xE
000251 9518      	RETI
         ;     634 
         ;     635 //-----------------------------------------------
         ;     636 // Timer 2 output compare interrupt service routine
         ;     637 interrupt [TIM2_COMP] void timer2_comp_isr(void)
         ;     638 {
          _timer2_comp_isr:
         ;     639 
         ;     640 	
         ;     641 
         ;     642 } 
000252 9518      	RETI
         ;     643 
         ;     644 
         ;     645 //-----------------------------------------------
         ;     646 //#pragma savereg-
         ;     647 interrupt [ADC_INT] void adc_isr(void)
         ;     648 {
          _adc_isr:
000253 920a      	ST   -Y,R0
000254 921a      	ST   -Y,R1
000255 939a      	ST   -Y,R25
000256 93aa      	ST   -Y,R26
000257 93ba      	ST   -Y,R27
000258 93ea      	ST   -Y,R30
000259 93fa      	ST   -Y,R31
00025a b7ef      	IN   R30,SREG
00025b 93ea      	ST   -Y,R30
         ;     649 
         ;     650 register static unsigned char input_index=0;
         
          	.DSEG
          _input_index_S12:
000217      	.BYTE 0x1
         
          	.CSEG
         ;     651 // Read the AD conversion result
         ;     652 adc_data=ADCW;
00025c b1e4      	IN   R30,0x4
00025d b1f5      	IN   R31,0x4+1
00025e 93e0 0206 	STS  _adc_data,R30
000260 93f0 0207 	STS  _adc_data+1,R31
         ;     653 
         ;     654 if (++input_index > 2)
000262 91a0 0217 	LDS  R26,_input_index_S12
000264 5faf      	SUBI R26,-LOW(1)
000265 93a0 0217 	STS  _input_index_S12,R26
000267 e0e2      	LDI  R30,LOW(2)
000268 17ea      	CP   R30,R26
000269 f418      	BRSH _0x5C
         ;     655    input_index=0;
00026a e0e0      	LDI  R30,LOW(0)
00026b 93e0 0217 	STS  _input_index_S12,R30
         ;     656 #ifdef DEBUG
         ;     657 ADMUX=(0b01000011)+input_index;
         ;     658 #endif
         ;     659 #ifdef RELEASE
         ;     660 ADMUX=0b01000000+input_index;
          _0x5C:
00026d 91e0 0217 	LDS  R30,_input_index_S12
00026f 5ce0      	SUBI R30,-LOW(64)
000270 b9e7      	OUT  0x7,R30
         ;     661 #endif
         ;     662 
         ;     663 // Start the AD conversion
         ;     664 ADCSRA|=0x40;
000271 9a36      	SBI  0x6,6
         ;     665 
         ;     666 if(input_index==1)
000272 91a0 0217 	LDS  R26,_input_index_S12
000274 30a1      	CPI  R26,LOW(0x1)
000275 f009      	BREQ PC+2
000276 c05c      	RJMP _0x5D
         ;     667 	{
         ;     668  	if((adc_data>100)&&!bA_)
000277 d20a      	RCALL SUBOPT_0xF
000278 f410      	BRSH _0x5F
000279 fe27      	SBRS R2,7
00027a c001      	RJMP _0x60
          _0x5F:
00027b c003      	RJMP _0x5E
          _0x60:
         ;     669     		{
         ;     670     		bA_=1;
00027c 9468      	SET
00027d f827      	BLD  R2,7
         ;     671     		cnt_x++;
00027e d208      	RCALL SUBOPT_0x10
         ;     672     		}
         ;     673     	if((adc_data<100)&&bA_)
          _0x5E:
00027f d20d      	RCALL SUBOPT_0x11
000280 f410      	BRSH _0x62
000281 fc27      	SBRC R2,7
000282 c001      	RJMP _0x63
          _0x62:
000283 c002      	RJMP _0x61
          _0x63:
         ;     674     		{
         ;     675     		bA_=0;
000284 94e8      	CLT
000285 f827      	BLD  R2,7
         ;     676     		}			
         ;     677 //	adc_data
         ;     678 	if(adc_data>10U)
          _0x61:
000286 d20e      	RCALL SUBOPT_0x12
000287 f460      	BRSH _0x64
         ;     679 		{
         ;     680 		bankA+=adc_data;
000288 91e0 0206 	LDS  R30,_adc_data
00028a 91f0 0207 	LDS  R31,_adc_data+1
00028c   +  	__ADDWRR 10,11,30,31
         ;     681 		bA=1;
00028e 9468      	SET
00028f f832      	BLD  R3,2
         ;     682 		pcnt[0]=10;
000290 e0ea      	LDI  R30,LOW(10)
000291 93e0 020f 	STS  _pcnt,R30
         ;     683 		}
         ;     684 	else if((adc_data<=10U)&&bA)
000293 c03f      	RJMP _0x65
          _0x64:
000294 d200      	RCALL SUBOPT_0x12
000295 f010      	BRLO _0x67
000296 fc32      	SBRC R3,2
000297 c001      	RJMP _0x68
          _0x67:
000298 c03a      	RJMP _0x66
          _0x68:
         ;     685 		{
         ;     686 		bA=0;
000299 94e8      	CLT
00029a f832      	BLD  R3,2
         ;     687 		
         ;     688 		adc_bankU[0,adc_cntA]=bankA/10;
00029b 91e0 0203 	LDS  R30,_adc_cntA
00029d d200      	RCALL SUBOPT_0x13
00029e 0fea      	ADD  R30,R26
00029f 1ffb      	ADC  R31,R27
0002a0 93ff      	PUSH R31
0002a1 93ef      	PUSH R30
0002a2   +  	__GETW2R 10,11
0002a4 d1fc      	RCALL SUBOPT_0x14
0002a5 91af      	POP  R26
0002a6 91bf      	POP  R27
0002a7 d2af      	RCALL __PUTWP1
         ;     689 		bankA=0;
0002a8 24aa      	CLR  R10
0002a9 24bb      	CLR  R11
         ;     690 		if(++adc_cntA>=25) 
0002aa 91a0 0203 	LDS  R26,_adc_cntA
0002ac 5faf      	SUBI R26,-LOW(1)
0002ad 93a0 0203 	STS  _adc_cntA,R26
0002af 31a9      	CPI  R26,LOW(0x19)
0002b0 f110      	BRLO _0x69
         ;     691 			{
         ;     692 			char i;
         ;     693 			adc_cntA=0;
0002b1 d1f3      	RCALL SUBOPT_0x15
         ;	i -> Y+0
0002b2 93e0 0203 	STS  _adc_cntA,R30
         ;     694 			adc_bankU_[0]=0;
0002b4 d1a6      	RCALL SUBOPT_0xB
         ;     695 			for(i=0;i<25;i++)
0002b5 d1f2      	RCALL SUBOPT_0x16
          _0x6B:
0002b6 d1f4      	RCALL SUBOPT_0x17
0002b7 f498      	BRSH _0x6C
         ;     696 				{
         ;     697 				adc_bankU_[0]+=adc_bankU[0,i];
0002b8 efaa      	LDI  R26,LOW(_adc_bankU_)
0002b9 e0b1      	LDI  R27,HIGH(_adc_bankU_)
0002ba 93bf      	PUSH R27
0002bb 93af      	PUSH R26
0002bc d296      	RCALL __GETW1P
0002bd 93ff      	PUSH R31
0002be 93ef      	PUSH R30
0002bf 81e8      	LD   R30,Y
0002c0 d1dd      	RCALL SUBOPT_0x13
0002c1 d188      	RCALL SUBOPT_0x7
0002c2 91af      	POP  R26
0002c3 91bf      	POP  R27
0002c4 0fea      	ADD  R30,R26
0002c5 1ffb      	ADC  R31,R27
0002c6 91af      	POP  R26
0002c7 91bf      	POP  R27
0002c8 d28e      	RCALL __PUTWP1
         ;     698 				}
0002c9 d1e4      	RCALL SUBOPT_0x18
0002ca cfeb      	RJMP _0x6B
          _0x6C:
         ;     699 			adc_bankU_[0]/=25;	
0002cb efaa      	LDI  R26,LOW(_adc_bankU_)
0002cc e0b1      	LDI  R27,HIGH(_adc_bankU_)
0002cd 93bf      	PUSH R27
0002ce 93af      	PUSH R26
0002cf d1e2      	RCALL SUBOPT_0x19
0002d0 91af      	POP  R26
0002d1 91bf      	POP  R27
0002d2 d1e5      	RCALL SUBOPT_0x1A
         ;     700 			}	
         ;     701 		}
          _0x69:
         ;     702 	//adc_bankU_[0]		          
         ;     703 	}  
          _0x66:
          _0x65:
         ;     704 if(input_index==2)
          _0x5D:
0002d3 91a0 0217 	LDS  R26,_input_index_S12
0002d5 30a2      	CPI  R26,LOW(0x2)
0002d6 f009      	BREQ PC+2
0002d7 c08b      	RJMP _0x6D
         ;     705 	{
         ;     706  	if((adc_data>100)&&!bB_)
0002d8 d1a9      	RCALL SUBOPT_0xF
0002d9 f410      	BRSH _0x6F
0002da fe30      	SBRS R3,0
0002db c001      	RJMP _0x70
          _0x6F:
0002dc c02a      	RJMP _0x6E
          _0x70:
         ;     707     		{
         ;     708     		bB_=1;
0002dd 9468      	SET
0002de f830      	BLD  R3,0
         ;     709     		cnt_x++;
0002df d1a7      	RCALL SUBOPT_0x10
         ;     710     		cher[0]=cnt_x;
0002e0 91e0 0208 	LDS  R30,_cnt_x
0002e2 93e0 0209 	STS  _cher,R30
         ;     711    // 		cnt_x=2;
         ;     712     		if(cnt_x==2)
0002e4 91a0 0208 	LDS  R26,_cnt_x
0002e6 30a2      	CPI  R26,LOW(0x2)
0002e7 f481      	BRNE _0x71
         ;     713     			{
         ;     714     			if(cher_cnt<50)
0002e8 d1d2      	RCALL SUBOPT_0x1B
0002e9 f46c      	BRGE _0x72
         ;     715 				{
         ;     716 				cher_cnt++;
0002ea 91e0 020c 	LDS  R30,_cher_cnt
0002ec 91f0 020d 	LDS  R31,_cher_cnt+1
0002ee 9631      	ADIW R30,1
0002ef 93e0 020c 	STS  _cher_cnt,R30
0002f1 93f0 020d 	STS  _cher_cnt+1,R31
         ;     717 				if((cher_cnt>=50)/*&&reset_cnt*/) bCHER_=1;//cher_alarm(0);
0002f3 d1c7      	RCALL SUBOPT_0x1B
0002f4 f014      	BRLT _0x73
0002f5 9468      	SET
0002f6 f837      	BLD  R3,7
         ;     718 		     	}
          _0x73:
         ;     719     			}
          _0x72:
         ;     720     		else
0002f7 c00f      	RJMP _0x74
          _0x71:
         ;     721     			{
         ;     722     			if(cher_cnt)
0002f8 d1ca      	RCALL SUBOPT_0x1C
0002f9 f069      	BREQ _0x75
         ;     723 				{
         ;     724 				cher_cnt--;
0002fa 91e0 020c 	LDS  R30,_cher_cnt
0002fc 91f0 020d 	LDS  R31,_cher_cnt+1
0002fe 9731      	SBIW R30,1
0002ff 93e0 020c 	STS  _cher_cnt,R30
000301 93f0 020d 	STS  _cher_cnt+1,R31
         ;     725 				if((cher_cnt==0)/*&&reset_cnt*/) bCHER_=0;//cher_alarm(1);
000303 d1bf      	RCALL SUBOPT_0x1C
000304 f411      	BRNE _0x76
000305 94e8      	CLT
000306 f837      	BLD  R3,7
         ;     726 		     	}
          _0x76:
         ;     727     			}
          _0x75:
          _0x74:
         ;     728   //  		bCHER_=0;			 
         ;     729     		}
         ;     730     	if((adc_data<100)&&bB_)
          _0x6E:
000307 d185      	RCALL SUBOPT_0x11
000308 f410      	BRSH _0x78
000309 fc30      	SBRC R3,0
00030a c001      	RJMP _0x79
          _0x78:
00030b c002      	RJMP _0x77
          _0x79:
         ;     731     		{
         ;     732     		bB_=0;
00030c 94e8      	CLT
00030d f830      	BLD  R3,0
         ;     733     		}	
         ;     734 	
         ;     735  	if(adc_data>10)
          _0x77:
00030e d186      	RCALL SUBOPT_0x12
00030f f460      	BRSH _0x7A
         ;     736 		{
         ;     737 		bankB+=adc_data;
000310 91e0 0206 	LDS  R30,_adc_data
000312 91f0 0207 	LDS  R31,_adc_data+1
000314   +  	__ADDWRR 12,13,30,31
         ;     738 		pcnt[1]=10;
000316 e0ea      	LDI  R30,LOW(10)
000317   +  	__PUTB1MN _pcnt,1
         ;     739 		bB=1;
000319 9468      	SET
00031a f833      	BLD  R3,3
         ;     740 		}
         ;     741 	else if((adc_data<=30)&&bB)
00031b c047      	RJMP _0x7B
          _0x7A:
00031c d1ac      	RCALL SUBOPT_0x1D
00031d f010      	BRLO _0x7D
00031e fc33      	SBRC R3,3
00031f c001      	RJMP _0x7E
          _0x7D:
000320 c042      	RJMP _0x7C
          _0x7E:
         ;     742 		{
         ;     743 		bB=0;
000321 94e8      	CLT
000322 f833      	BLD  R3,3
         ;     744 		adc_bankU[1,adc_cntB]=bankB/10;
000323   +  	__POINTW2MN _adc_bankU,50
000325 91e0 0204 	LDS  R30,_adc_cntB
000327 d11e      	RCALL SUBOPT_0x6
000328 0fea      	ADD  R30,R26
000329 1ffb      	ADC  R31,R27
00032a 93ff      	PUSH R31
00032b 93ef      	PUSH R30
00032c   +  	__GETW2R 12,13
00032e d172      	RCALL SUBOPT_0x14
00032f 91af      	POP  R26
000330 91bf      	POP  R27
000331 d225      	RCALL __PUTWP1
         ;     745 		bankB=0;
000332 24cc      	CLR  R12
000333 24dd      	CLR  R13
         ;     746 		if(++adc_cntB>=25) 
000334 91a0 0204 	LDS  R26,_adc_cntB
000336 5faf      	SUBI R26,-LOW(1)
000337 93a0 0204 	STS  _adc_cntB,R26
000339 31a9      	CPI  R26,LOW(0x19)
00033a f140      	BRLO _0x7F
         ;     747 			{
         ;     748 			char i;
         ;     749 			adc_cntB=0;
00033b d169      	RCALL SUBOPT_0x15
         ;	i -> Y+0
00033c 93e0 0204 	STS  _adc_cntB,R30
         ;     750 			adc_bankU_[1]=0;
00033e e0e0      	LDI  R30,LOW(0)
00033f e0f0      	LDI  R31,HIGH(0)
000340   +  	__PUTW1MN _adc_bankU_,2
         ;     751 			for(i=0;i<25;i++)
000344 d163      	RCALL SUBOPT_0x16
          _0x81:
000345 d165      	RCALL SUBOPT_0x17
000346 f4a0      	BRSH _0x82
         ;     752 				{
         ;     753 				adc_bankU_[1]+=adc_bankU[1,i];
000347   +  	__POINTW2MN _adc_bankU_,2
000349 93bf      	PUSH R27
00034a 93af      	PUSH R26
00034b d207      	RCALL __GETW1P
00034c 93ff      	PUSH R31
00034d 93ef      	PUSH R30
00034e   +  	__POINTW2MN _adc_bankU,50
000350 d181      	RCALL SUBOPT_0x1E
000351 d0f8      	RCALL SUBOPT_0x7
000352 91af      	POP  R26
000353 91bf      	POP  R27
000354 0fea      	ADD  R30,R26
000355 1ffb      	ADC  R31,R27
000356 91af      	POP  R26
000357 91bf      	POP  R27
000358 d1fe      	RCALL __PUTWP1
         ;     754 				}
000359 d154      	RCALL SUBOPT_0x18
00035a cfea      	RJMP _0x81
          _0x82:
         ;     755 			adc_bankU_[1]/=25;	
00035b   +  	__POINTW2MN _adc_bankU_,2
00035d 93bf      	PUSH R27
00035e 93af      	PUSH R26
00035f d152      	RCALL SUBOPT_0x19
000360 91af      	POP  R26
000361 91bf      	POP  R27
000362 d155      	RCALL SUBOPT_0x1A
         ;     756 			}	
         ;     757 		}	
          _0x7F:
         ;     758 	} 
          _0x7C:
          _0x7B:
         ;     759 		
         ;     760 if(input_index==0)
          _0x6D:
000363 91e0 0217 	LDS  R30,_input_index_S12
000365 30e0      	CPI  R30,0
000366 f009      	BREQ PC+2
000367 c073      	RJMP _0x83
         ;     761 	{
         ;     762 	if((adc_data>100)&&!bC_)
000368 d119      	RCALL SUBOPT_0xF
000369 f410      	BRSH _0x85
00036a fe31      	SBRS R3,1
00036b c001      	RJMP _0x86
          _0x85:
00036c c005      	RJMP _0x84
          _0x86:
         ;     763     			{
         ;     764     			bC_=1;
00036d 9468      	SET
00036e f831      	BLD  R3,1
         ;     765     			cnt_x=0;
00036f e0e0      	LDI  R30,LOW(0)
000370 93e0 0208 	STS  _cnt_x,R30
         ;     766     			}
         ;     767     		if((adc_data<100)&&bC_)
          _0x84:
000372 d11a      	RCALL SUBOPT_0x11
000373 f410      	BRSH _0x88
000374 fc31      	SBRC R3,1
000375 c001      	RJMP _0x89
          _0x88:
000376 c002      	RJMP _0x87
          _0x89:
         ;     768     			{
         ;     769     			bC_=0;
000377 94e8      	CLT
000378 f831      	BLD  R3,1
         ;     770     			}	
         ;     771 	
         ;     772 	if(adc_data>30)
          _0x87:
000379 d14f      	RCALL SUBOPT_0x1D
00037a f4a0      	BRSH _0x8A
         ;     773 		{
         ;     774 		bankC+=adc_data;
00037b 91e0 0206 	LDS  R30,_adc_data
00037d 91f0 0207 	LDS  R31,_adc_data+1
00037f 91a0 0160 	LDS  R26,_bankC
000381 91b0 0161 	LDS  R27,_bankC+1
000383 0fea      	ADD  R30,R26
000384 1ffb      	ADC  R31,R27
000385 93e0 0160 	STS  _bankC,R30
000387 93f0 0161 	STS  _bankC+1,R31
         ;     775 		pcnt[2]=10;
000389 e0ea      	LDI  R30,LOW(10)
00038a   +  	__PUTB1MN _pcnt,2
         ;     776 		bC=1;
00038c 9468      	SET
00038d f834      	BLD  R3,4
         ;     777 		}
         ;     778 	else if((adc_data<=30)&&bC)
00038e c04c      	RJMP _0x8B
          _0x8A:
00038f d139      	RCALL SUBOPT_0x1D
000390 f010      	BRLO _0x8D
000391 fc34      	SBRC R3,4
000392 c001      	RJMP _0x8E
          _0x8D:
000393 c047      	RJMP _0x8C
          _0x8E:
         ;     779 		{
         ;     780 		bC=0;
000394 94e8      	CLT
000395 f834      	BLD  R3,4
         ;     781 		adc_bankU[2,adc_cntC]=bankC/10;
000396   +  	__POINTW2MN _adc_bankU,100
000398 91e0 0205 	LDS  R30,_adc_cntC
00039a d0ab      	RCALL SUBOPT_0x6
00039b 0fea      	ADD  R30,R26
00039c 1ffb      	ADC  R31,R27
00039d 93ff      	PUSH R31
00039e 93ef      	PUSH R30
00039f 91a0 0160 	LDS  R26,_bankC
0003a1 91b0 0161 	LDS  R27,_bankC+1
0003a3 d0fd      	RCALL SUBOPT_0x14
0003a4 91af      	POP  R26
0003a5 91bf      	POP  R27
0003a6 d1b0      	RCALL __PUTWP1
         ;     782 		bankC=0;
0003a7 e0e0      	LDI  R30,0
0003a8 93e0 0160 	STS  _bankC,R30
0003aa 93e0 0161 	STS  _bankC+1,R30
         ;     783 		if(++adc_cntC>=25) 
0003ac 91a0 0205 	LDS  R26,_adc_cntC
0003ae 5faf      	SUBI R26,-LOW(1)
0003af 93a0 0205 	STS  _adc_cntC,R26
0003b1 31a9      	CPI  R26,LOW(0x19)
0003b2 f140      	BRLO _0x8F
         ;     784 			{
         ;     785 			char i;
         ;     786 			adc_cntC=0;
0003b3 d0f1      	RCALL SUBOPT_0x15
         ;	i -> Y+0
0003b4 93e0 0205 	STS  _adc_cntC,R30
         ;     787 			adc_bankU_[2]=0;
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 e0f0      	LDI  R31,HIGH(0)
0003b8   +  	__PUTW1MN _adc_bankU_,4
         ;     788 			for(i=0;i<25;i++)
0003bc d0eb      	RCALL SUBOPT_0x16
          _0x91:
0003bd d0ed      	RCALL SUBOPT_0x17
0003be f4a0      	BRSH _0x92
         ;     789 				{
         ;     790 				adc_bankU_[2]+=adc_bankU[2,i];
0003bf   +  	__POINTW2MN _adc_bankU_,4
0003c1 93bf      	PUSH R27
0003c2 93af      	PUSH R26
0003c3 d18f      	RCALL __GETW1P
0003c4 93ff      	PUSH R31
0003c5 93ef      	PUSH R30
0003c6   +  	__POINTW2MN _adc_bankU,100
0003c8 d109      	RCALL SUBOPT_0x1E
0003c9 d080      	RCALL SUBOPT_0x7
0003ca 91af      	POP  R26
0003cb 91bf      	POP  R27
0003cc 0fea      	ADD  R30,R26
0003cd 1ffb      	ADC  R31,R27
0003ce 91af      	POP  R26
0003cf 91bf      	POP  R27
0003d0 d186      	RCALL __PUTWP1
         ;     791 				}
0003d1 d0dc      	RCALL SUBOPT_0x18
0003d2 cfea      	RJMP _0x91
          _0x92:
         ;     792 			adc_bankU_[2]/=25;	
0003d3   +  	__POINTW2MN _adc_bankU_,4
0003d5 93bf      	PUSH R27
0003d6 93af      	PUSH R26
0003d7 d0da      	RCALL SUBOPT_0x19
0003d8 91af      	POP  R26
0003d9 91bf      	POP  R27
0003da d0dd      	RCALL SUBOPT_0x1A
         ;     793 			}	
         ;     794 		}	
          _0x8F:
         ;     795 	}
          _0x8C:
          _0x8B:
         ;     796 
         ;     797 #asm("sei")
          _0x83:
0003db 9478      	sei
         ;     798 }
0003dc 91e9      	LD   R30,Y+
0003dd bfef      	OUT  SREG,R30
0003de 91f9      	LD   R31,Y+
0003df 91e9      	LD   R30,Y+
0003e0 91b9      	LD   R27,Y+
0003e1 91a9      	LD   R26,Y+
0003e2 9199      	LD   R25,Y+
0003e3 9019      	LD   R1,Y+
0003e4 9009      	LD   R0,Y+
0003e5 9518      	RETI
         ;     799 
         ;     800 //===============================================
         ;     801 //===============================================
         ;     802 //===============================================
         ;     803 //===============================================
         ;     804 void main(void)
         ;     805 {
          _main:
         ;     806 /*PORTC=0;
         ;     807 DDRC&=0xFE;*/
         ;     808 #ifdef DEBUG
         ;     809 UCSRA=0x02;
         ;     810 UCSRB=0xD8;
         ;     811 UCSRC=0x86;
         ;     812 UBRRH=0x00;
         ;     813 UBRRL=0x18; 
         ;     814 #endif
         ;     815 /*
         ;     816 #ifdef RELEASE
         ;     817 UCSRA=0x00;
         ;     818 UCSRB=0xD0;
         ;     819 UCSRC=0x00;
         ;     820 UBRRH=0x00;
         ;     821 UBRRL=0x00; 
         ;     822 #endif
         ;     823 */
         ;     824 #ifdef DEBUG
         ;     825 PORTB=0x00;
         ;     826 DDRB=0xB0;
         ;     827 DDRB|=0b00101100;
         ;     828 
         ;     829 PORTC=0x00;
         ;     830 DDRC=0x00;
         ;     831 
         ;     832 PORTD=0x00;
         ;     833 DDRD=0x02;
         ;     834 #endif 
         ;     835 
         ;     836 #ifdef RELEASE
         ;     837 PORTC=0x00;
0003e6 e0e0      	LDI  R30,LOW(0)
0003e7 bbe5      	OUT  0x15,R30
         ;     838 DDRC=0x00;
0003e8 bbe4      	OUT  0x14,R30
         ;     839 
         ;     840 PORTD=0x00;
0003e9 bbe2      	OUT  0x12,R30
         ;     841 DDRD=0x02;
0003ea e0e2      	LDI  R30,LOW(2)
0003eb bbe1      	OUT  0x11,R30
         ;     842 #endif 
         ;     843 
         ;     844 ASSR=0;
0003ec e0e0      	LDI  R30,LOW(0)
0003ed bde2      	OUT  0x22,R30
         ;     845 OCR2=0;
0003ee bde3      	OUT  0x23,R30
         ;     846 
         ;     847 // ADC initialization
         ;     848 
         ;     849 ADMUX=0b01000011;
0003ef e4e3      	LDI  R30,LOW(67)
0003f0 b9e7      	OUT  0x7,R30
         ;     850 ADCSRA=0xCC;
0003f1 ecec      	LDI  R30,LOW(204)
0003f2 b9e6      	OUT  0x6,R30
         ;     851 
         ;     852 t0_init();
0003f3 dc60      	RCALL _t0_init
         ;     853 t2_init(); 
0003f4 dc67      	RCALL _t2_init
         ;     854 del_init();
0003f5 dc70      	RCALL _del_init
         ;     855 #asm("sei")
0003f6 9478      	sei
         ;     856 
         ;     857 bCHER_=0;
0003f7 94e8      	CLT
0003f8 f837      	BLD  R3,7
         ;     858 ind=iMn;
0003f9 d068      	RCALL SUBOPT_0xC
         ;     859 
         ;     860 while (1)
          _0x93:
         ;     861 	{
         ;     862 #ifdef DEBUG
         ;     863 	UART_IN();
         ;     864 #endif
         ;     865 	if(b100Hz)
0003fa fe21      	SBRS R2,1
0003fb c005      	RJMP _0x96
         ;     866 		{
         ;     867 		b100Hz=0;
0003fc 94e8      	CLT
0003fd f821      	BLD  R2,1
         ;     868 
         ;     869 		but_drv();
0003fe ddd0      	RCALL _but_drv
         ;     870 		but_an();
0003ff ddfa      	RCALL _but_an
         ;     871 		pcnt_hndl();
000400 dda3      	RCALL _pcnt_hndl
         ;     872 		}   
         ;     873 	if(b10Hz)
          _0x96:
000401 fe22      	SBRS R2,2
000402 c004      	RJMP _0x97
         ;     874 		{
         ;     875 		b10Hz=0;
000403 94e8      	CLT
000404 f822      	BLD  R2,2
         ;     876 		ind_hndl();
000405 dc78      	RCALL _ind_hndl
         ;     877  //	DDRD^=0x07;
         ;     878   //	PORTD&=0xf8;
         ;     879 	 	out_out();
000406 dcab      	RCALL _out_out
         ;     880 		}
         ;     881 	if(b5Hz)
          _0x97:
000407 fe23      	SBRS R2,3
000408 c009      	RJMP _0x98
         ;     882 		{
         ;     883 		b5Hz=0;
000409 94e8      	CLT
00040a f823      	BLD  R2,3
         ;     884 	  	per_drv();
00040b dcca      	RCALL _per_drv
         ;     885 	  	nn_drv();
00040c dd4e      	RCALL _nn_drv
         ;     886 
         ;     887 	  	
         ;     888 #ifdef DEBUG
         ;     889 		OUT_adr(adc_bankU_,10);
         ;     890 #endif
         ;     891 		//OUT(3,adc_data,0,0,4,5,6);
         ;     892 		deltas=delta;
00040d e0a1      	LDI  R26,LOW(_delta)
00040e e0b0      	LDI  R27,HIGH(_delta)
00040f d14a      	RCALL __EEPROMRDB
000410 93e0 0202 	STS  _deltas,R30
         ;     893 #ifdef DEBUG
         ;     894 		if(bCHER_) flags|=0x10;
         ;     895 		else flags&=0xef;
         ;     896 
         ;     897 		if(!LED_NET) flags|=0x20;
         ;     898 		else flags&=0xdf;
         ;     899 		
         ;     900 		if(!LED_DEL) flags|=0x40;
         ;     901 		else flags&=0xbf;
         ;     902 		
         ;     903 		if(!LED_PER) flags|=0x80;
         ;     904 		else flags&=0x7f;
         ;     905 #endif								
         ;     906 		}
         ;     907 	if(b2Hz)
          _0x98:
000412 fe24      	SBRS R2,4
000413 c002      	RJMP _0x99
         ;     908 		{
         ;     909 		b2Hz=0;
000414 94e8      	CLT
000415 f824      	BLD  R2,4
         ;     910 		
         ;     911 //		DDRB|=0x07;
         ;     912  //        PORTB^=0x07;
         ;     913 
         ;     914 		}		 
         ;     915     	if(b1Hz)
          _0x99:
000416 fe25      	SBRS R2,5
000417 c005      	RJMP _0x9A
         ;     916 		{
         ;     917 		b1Hz=0;
000418 94e8      	CLT
000419 f825      	BLD  R2,5
         ;     918 		del_hndl();
00041a dc54      	RCALL _del_hndl
         ;     919 		per_hndl();
00041b dd58      	RCALL _per_hndl
         ;     920 		nn_hndl();  
00041c dd72      	RCALL _nn_hndl
         ;     921          	//OUT(6,1,2,3,4,5,6);
         ;     922 		 
         ;     923 		}
         ;     924      #asm("wdr")	
          _0x9A:
00041d 95a8      	wdr
         ;     925 	}
00041e cfdb      	RJMP _0x93
         ;     926 }
          _0x9B:
00041f cfff      	RJMP _0x9B
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x0:
000420 91e0 0200 	LDS  R30,_del_cnt
000422 91f0 0201 	LDS  R31,_del_cnt+1
000424 9730      	SBIW R30,0
000425 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1:
000426 91e0 0212 	LDS  R30,_ind
000428 30e0      	CPI  R30,0
000429 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2:
00042a 91a0 0212 	LDS  R26,_ind
00042c 30a1      	CPI  R26,LOW(0x1)
00042d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3:
00042e 91a0 01fa 	LDS  R26,_adc_bankU_
000430 91b0 01fb 	LDS  R27,_adc_bankU_+1
000432 17ae      	CP   R26,R30
000433 07bf      	CPC  R27,R31
000434 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4:
000435 91a0 01fa 	LDS  R26,_adc_bankU_
000437 91b0 01fb 	LDS  R27,_adc_bankU_+1
000439 17ea      	CP   R30,R26
00043a 07fb      	CPC  R31,R27
00043b 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x5:
00043c 2fe0      	MOV  R30,R16
00043d efaa      	LDI  R26,LOW(_adc_bankU_)
00043e e0b1      	LDI  R27,HIGH(_adc_bankU_)
00043f e0f0      	LDI  R31,0
000440 0fee      	LSL  R30
000441 1fff      	ROL  R31
000442 0fae      	ADD  R26,R30
000443 1fbf      	ADC  R27,R31
000444 d10e      	RCALL __GETW1P
000445 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES
          SUBOPT_0x6:
000446 e0f0      	LDI  R31,0
000447 0fee      	LSL  R30
000448 1fff      	ROL  R31
000449 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x7:
00044a 0fae      	ADD  R26,R30
00044b 1fbf      	ADC  R27,R31
00044c d106      	RCALL __GETW1P
00044d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x8:
00044e e6e4      	LDI  R30,LOW(100)
00044f e0f0      	LDI  R31,HIGH(100)
000450 17ea      	CP   R30,R26
000451 07fb      	CPC  R31,R27
000452 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x9:
000453 91e0 020f 	LDS  R30,_pcnt
000455 30e0      	CPI  R30,0
000456 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xA:
000457 91ec      	LD   R30,X
000458 50e1      	SUBI R30,LOW(1)
000459 93ec      	ST   X,R30
00045a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xB:
00045b e0e0      	LDI  R30,LOW(0)
00045c e0f0      	LDI  R31,HIGH(0)
00045d 93e0 01fa 	STS  _adc_bankU_,R30
00045f 93f0 01fb 	STS  _adc_bankU_+1,R31
000461 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xC:
000462 e0e0      	LDI  R30,LOW(0)
000463 93e0 0212 	STS  _ind,R30
000465 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xD:
000466 920a      	ST   -Y,R0
000467 921a      	ST   -Y,R1
000468 92fa      	ST   -Y,R15
000469 936a      	ST   -Y,R22
00046a 937a      	ST   -Y,R23
00046b 938a      	ST   -Y,R24
00046c 939a      	ST   -Y,R25
00046d 93aa      	ST   -Y,R26
00046e 93ba      	ST   -Y,R27
00046f 93ea      	ST   -Y,R30
000470 93fa      	ST   -Y,R31
000471 b7ef      	IN   R30,SREG
000472 93ea      	ST   -Y,R30
000473 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xE:
000474 91e9      	LD   R30,Y+
000475 bfef      	OUT  SREG,R30
000476 91f9      	LD   R31,Y+
000477 91e9      	LD   R30,Y+
000478 91b9      	LD   R27,Y+
000479 91a9      	LD   R26,Y+
00047a 9199      	LD   R25,Y+
00047b 9189      	LD   R24,Y+
00047c 9179      	LD   R23,Y+
00047d 9169      	LD   R22,Y+
00047e 90f9      	LD   R15,Y+
00047f 9019      	LD   R1,Y+
000480 9009      	LD   R0,Y+
000481 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xF:
000482 91a0 0206 	LDS  R26,_adc_data
000484 91b0 0207 	LDS  R27,_adc_data+1
000486 cfc7      	RJMP SUBOPT_0x8
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x10:
000487 91e0 0208 	LDS  R30,_cnt_x
000489 5fef      	SUBI R30,-LOW(1)
00048a 93e0 0208 	STS  _cnt_x,R30
00048c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x11:
00048d 91a0 0206 	LDS  R26,_adc_data
00048f 91b0 0207 	LDS  R27,_adc_data+1
000491 36a4      	CPI  R26,LOW(0x64)
000492 e0e0      	LDI  R30,HIGH(0x64)
000493 07be      	CPC  R27,R30
000494 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x12:
000495 91a0 0206 	LDS  R26,_adc_data
000497 91b0 0207 	LDS  R27,_adc_data+1
000499 e0ea      	LDI  R30,LOW(10)
00049a e0f0      	LDI  R31,HIGH(10)
00049b 17ea      	CP   R30,R26
00049c 07fb      	CPC  R31,R27
00049d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x13:
00049e e6a2      	LDI  R26,LOW(_adc_bankU)
00049f e0b1      	LDI  R27,HIGH(_adc_bankU)
0004a0 cfa5      	RJMP SUBOPT_0x6
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x14:
0004a1 e0ea      	LDI  R30,LOW(10)
0004a2 e0f0      	LDI  R31,HIGH(10)
0004a3 d05e      	RCALL __DIVW21U
0004a4 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x15:
0004a5 9721      	SBIW R28,1
0004a6 e0e0      	LDI  R30,LOW(0)
0004a7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x16:
0004a8 e0e0      	LDI  R30,LOW(0)
0004a9 83e8      	ST   Y,R30
0004aa 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x17:
0004ab 81a8      	LD   R26,Y
0004ac 31a9      	CPI  R26,LOW(0x19)
0004ad 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x18:
0004ae 81e8      	LD   R30,Y
0004af 5fef      	SUBI R30,-LOW(1)
0004b0 83e8      	ST   Y,R30
0004b1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x19:
0004b2 d0a0      	RCALL __GETW1P
0004b3 01df      	MOVW R26,R30
0004b4 e1e9      	LDI  R30,LOW(25)
0004b5 e0f0      	LDI  R31,HIGH(25)
0004b6 d04b      	RCALL __DIVW21U
0004b7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1A:
0004b8 d09e      	RCALL __PUTWP1
0004b9 9621      	ADIW R28,1
0004ba 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1B:
0004bb 91a0 020c 	LDS  R26,_cher_cnt
0004bd 91b0 020d 	LDS  R27,_cher_cnt+1
0004bf 33a2      	CPI  R26,LOW(0x32)
0004c0 e0e0      	LDI  R30,HIGH(0x32)
0004c1 07be      	CPC  R27,R30
0004c2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1C:
0004c3 91e0 020c 	LDS  R30,_cher_cnt
0004c5 91f0 020d 	LDS  R31,_cher_cnt+1
0004c7 9730      	SBIW R30,0
0004c8 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1D:
0004c9 91a0 0206 	LDS  R26,_adc_data
0004cb 91b0 0207 	LDS  R27,_adc_data+1
0004cd e1ee      	LDI  R30,LOW(30)
0004ce e0f0      	LDI  R31,HIGH(30)
0004cf 17ea      	CP   R30,R26
0004d0 07fb      	CPC  R31,R27
0004d1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1E:
0004d2 81e8      	LD   R30,Y
0004d3 cf72      	RJMP SUBOPT_0x6
         
          __ANEGD1:
0004d4 95e0      	COM  R30
0004d5 95f0      	COM  R31
0004d6 9560      	COM  R22
0004d7 9570      	COM  R23
0004d8 5fef      	SUBI R30,-1
0004d9 4fff      	SBCI R31,-1
0004da 4f6f      	SBCI R22,-1
0004db 4f7f      	SBCI R23,-1
0004dc 9508      	RET
         
          __MULD12U:
0004dd 9f7a      	MUL  R23,R26
0004de 2d70      	MOV  R23,R0
0004df 9f6b      	MUL  R22,R27
0004e0 0d70      	ADD  R23,R0
0004e1 9ff8      	MUL  R31,R24
0004e2 0d70      	ADD  R23,R0
0004e3 9fe9      	MUL  R30,R25
0004e4 0d70      	ADD  R23,R0
0004e5 9f6a      	MUL  R22,R26
0004e6 2d60      	MOV  R22,R0
0004e7 0d71      	ADD  R23,R1
0004e8 9ffb      	MUL  R31,R27
0004e9 0d60      	ADD  R22,R0
0004ea 1d71      	ADC  R23,R1
0004eb 9fe8      	MUL  R30,R24
0004ec 0d60      	ADD  R22,R0
0004ed 1d71      	ADC  R23,R1
0004ee 2788      	CLR  R24
0004ef 9ffa      	MUL  R31,R26
0004f0 2df0      	MOV  R31,R0
0004f1 0d61      	ADD  R22,R1
0004f2 1f78      	ADC  R23,R24
0004f3 9feb      	MUL  R30,R27
0004f4 0df0      	ADD  R31,R0
0004f5 1d61      	ADC  R22,R1
0004f6 1f78      	ADC  R23,R24
0004f7 9fea      	MUL  R30,R26
0004f8 2de0      	MOV  R30,R0
0004f9 0df1      	ADD  R31,R1
0004fa 1f68      	ADC  R22,R24
0004fb 1f78      	ADC  R23,R24
0004fc 9508      	RET
         
          __MULD12:
0004fd d042      	RCALL __CHKSIGND
0004fe dfde      	RCALL __MULD12U
0004ff f40e      	BRTC __MULD121
000500 dfd3      	RCALL __ANEGD1
          __MULD121:
000501 9508      	RET
         
          __DIVW21U:
000502 2400      	CLR  R0
000503 2411      	CLR  R1
000504 e190      	LDI  R25,16
          __DIVW21U1:
000505 0faa      	LSL  R26
000506 1fbb      	ROL  R27
000507 1c00      	ROL  R0
000508 1c11      	ROL  R1
000509 1a0e      	SUB  R0,R30
00050a 0a1f      	SBC  R1,R31
00050b f418      	BRCC __DIVW21U2
00050c 0e0e      	ADD  R0,R30
00050d 1e1f      	ADC  R1,R31
00050e c001      	RJMP __DIVW21U3
          __DIVW21U2:
00050f 60a1      	SBR  R26,1
          __DIVW21U3:
000510 959a      	DEC  R25
000511 f799      	BRNE __DIVW21U1
000512 01fd      	MOVW R30,R26
000513 01d0      	MOVW R26,R0
000514 9508      	RET
         
          __DIVD21U:
000515 933f      	PUSH R19
000516 934f      	PUSH R20
000517 935f      	PUSH R21
000518 2400      	CLR  R0
000519 2411      	CLR  R1
00051a 2733      	CLR  R19
00051b 2744      	CLR  R20
00051c e250      	LDI  R21,32
          __DIVD21U1:
00051d 0faa      	LSL  R26
00051e 1fbb      	ROL  R27
00051f 1f88      	ROL  R24
000520 1f99      	ROL  R25
000521 1c00      	ROL  R0
000522 1c11      	ROL  R1
000523 1f33      	ROL  R19
000524 1f44      	ROL  R20
000525 1a0e      	SUB  R0,R30
000526 0a1f      	SBC  R1,R31
000527 0b36      	SBC  R19,R22
000528 0b47      	SBC  R20,R23
000529 f428      	BRCC __DIVD21U2
00052a 0e0e      	ADD  R0,R30
00052b 1e1f      	ADC  R1,R31
00052c 1f36      	ADC  R19,R22
00052d 1f47      	ADC  R20,R23
00052e c001      	RJMP __DIVD21U3
          __DIVD21U2:
00052f 60a1      	SBR  R26,1
          __DIVD21U3:
000530 955a      	DEC  R21
000531 f759      	BRNE __DIVD21U1
000532 01fd      	MOVW R30,R26
000533 01bc      	MOVW R22,R24
000534 01d0      	MOVW R26,R0
000535 2f83      	MOV  R24,R19
000536 2f94      	MOV  R25,R20
000537 915f      	POP  R21
000538 914f      	POP  R20
000539 913f      	POP  R19
00053a 9508      	RET
         
          __DIVD21:
00053b d004      	RCALL __CHKSIGND
00053c dfd8      	RCALL __DIVD21U
00053d f40e      	BRTC __DIVD211
00053e df95      	RCALL __ANEGD1
          __DIVD211:
00053f 9508      	RET
         
          __CHKSIGND:
000540 94e8      	CLT
000541 ff77      	SBRS R23,7
000542 c002      	RJMP __CHKSD1
000543 df90      	RCALL __ANEGD1
000544 9468      	SET
          __CHKSD1:
000545 ff97      	SBRS R25,7
000546 c00b      	RJMP __CHKSD2
000547 2400      	CLR  R0
000548 95a0      	COM  R26
000549 95b0      	COM  R27
00054a 9580      	COM  R24
00054b 9590      	COM  R25
00054c 9611      	ADIW R26,1
00054d 1d80      	ADC  R24,R0
00054e 1d90      	ADC  R25,R0
00054f f800      	BLD  R0,0
000550 9403      	INC  R0
000551 fa00      	BST  R0,0
          __CHKSD2:
000552 9508      	RET
         
          __GETW1P:
000553 91ed      	LD   R30,X+
000554 91fc      	LD   R31,X
000555 9711      	SBIW R26,1
000556 9508      	RET
         
          __PUTWP1:
000557 93ed      	ST   X+,R30
000558 93fc      	ST   X,R31
000559 9508      	RET
         
          __EEPROMRDB:
00055a 99e1      	SBIC EECR,EEWE
00055b cffe      	RJMP __EEPROMRDB
00055c 93ff      	PUSH R31
00055d b7ff      	IN   R31,SREG
00055e 94f8      	CLI
00055f bbae      	OUT  EEARL,R26
000560 bbbf      	OUT  EEARH,R27
000561 9ae0      	SBI  EECR,EERE
000562 b3ed      	IN   R30,EEDR
000563 bfff      	OUT  SREG,R31
000564 91ff      	POP  R31
000565 9508      	RET
         
          __EEPROMWRB:
000566 99e1      	SBIC EECR,EEWE
000567 cffe      	RJMP __EEPROMWRB
000568 b79f      	IN   R25,SREG
000569 94f8      	CLI
00056a bbae      	OUT  EEARL,R26
00056b bbbf      	OUT  EEARH,R27
00056c 9ae0      	SBI  EECR,EERE
00056d b38d      	IN   R24,EEDR
00056e 17e8      	CP   R30,R24
00056f f019      	BREQ __EEPROMWRB0
000570 bbed      	OUT  EEDR,R30
000571 9ae2      	SBI  EECR,EEMWE
000572 9ae1      	SBI  EECR,EEWE
          __EEPROMWRB0:
000573 bf9f      	OUT  SREG,R25
000574 9508      	RET
         
          __SAVELOCR2:
000575 931a      	ST   -Y,R17
000576 930a      	ST   -Y,R16
000577 9508      	RET
         
          __LOADLOCR2:
000578 8119      	LDD  R17,Y+1
000579 8108      	LD   R16,Y
00057a 9508      	RET
         

Assembly complete with no errors.
