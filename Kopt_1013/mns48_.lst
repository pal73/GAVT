
AVRASM ver. 1.52  mns48_.asm Thu Sep 22 04:34:20 2005


         ;CodeVisionAVR C Compiler V1.24.1d Standard
         ;(C) Copyright 1998-2004 Pavel Haiduc, HP InfoTech s.r.l.
         ;http://www.hpinfotech.ro
         ;e-mail:office@hpinfotech.ro
         
         ;Chip type           : ATmega48
         ;Clock frequency     : 1,000000 MHz
         ;Memory model        : Small
         ;Optimize for        : Size
         ;(s)printf features  : int, width
         ;(s)scanf features   : long, width
         ;External SRAM size  : 0
         ;Data Stack size     : 128 byte(s)
         ;Heap size           : 0 byte(s)
         ;Promote char to int : No
         ;char is unsigned    : Yes
         ;8 bit enums         : Yes
         ;Enhanced core instructions    : On
         ;Automatic register allocation : On
         
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU EECR=0x1F
          	.EQU EEDR=0x20
          	.EQU EEARL=0x21
          	.EQU EEARH=0x22
          	.EQU SPSR=0x2D
          	.EQU SPDR=0x2E
          	.EQU SMCR=0x33
          	.EQU MCUSR=0x34
          	.EQU MCUCR=0x35
          	.EQU WDTCSR=0x60
          	.EQU UCSR0A=0xC0
          	.EQU UDR0=0xC6
          	.EQU RAMPZ=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
          	.EQU GPIOR0=0x1E
          	.EQU GPIOR1=0x2A
          	.EQU GPIOR2=0x2B
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x01
          	.EQU __sm_mask=0x0E
          	.EQU __sm_adc_noise_red=0x02
          	.EQU __sm_powerdown=0x04
          	.EQU __sm_powersave=0x06
          	.EQU __sm_standby=0x0C
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	LDI  R30,0
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTBRM
          	LDI  R@0,LOW(@1)
          	.ENDM
         
          	.MACRO __POINTWRM
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __POINTBRMN
          	LDI  R@0,LOW(@1+@2)
          	.ENDM
         
          	.MACRO __POINTWRMN
          	LDI  R@0,LOW(@2+@3)
          	LDI  R@1,HIGH(@2+@3)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	RCALL __PUTDP1
          	.ENDM
         
         
          	.MACRO __GETB1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOVW R30,R0
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOVW R26,R0
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __MULBRR
          	MULS R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __MULBRRU
          	MUL  R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "mns48_.vec"
         
         ;INTERRUPT VECTORS
000000 c027      	RJMP __RESET
000001 cffe      	RJMP 0
000002 cffd      	RJMP 0
000003 cffc      	RJMP 0
000004 cffb      	RJMP 0
000005 cffa      	RJMP 0
000006 cff9      	RJMP 0
000007 cff8      	RJMP 0
000008 cff7      	RJMP 0
000009 cff6      	RJMP 0
00000a cff5      	RJMP 0
00000b cff4      	RJMP 0
00000c cff3      	RJMP 0
00000d cff2      	RJMP 0
00000e cff1      	RJMP 0
00000f cff0      	RJMP 0
000010 c066      	RJMP _timer0_ovf_isr
000011 cfee      	RJMP 0
000012 cfed      	RJMP 0
000013 cfec      	RJMP 0
000014 cfeb      	RJMP 0
000015 c0a4      	RJMP _adc_isr
000016 cfe9      	RJMP 0
000017 cfe8      	RJMP 0
000018 cfe7      	RJMP 0
000019 cfe6      	RJMP 0
         
          	.INCLUDE "mns48_.inc"
          	.DEF _t0_cnt0=R5
          	.DEF _t0_cnt1=R6
          	.DEF _t0_cnt2=R7
          	.DEF _t0_cnt3=R8
          	.DEF _bankA=R9
          	.DEF _bankB=R11
          	.DEF _bankC=R13
          _3:
          	.DB  0x5,0x6,0x7
00001a 0605
00001b 0007
          _4:
          	.DW  0x19
00001c 0019
          _DF:
          	.DB  0x0,0xA,0xF,0x14,0x19,0x1E,0x23
00001d 0a00
00001e 140f
00001f 1e19
000020 0023
         
         ;GPIOR0-GPIOR2 INITIALIZATION
          	.EQU  __GPIOR0_INIT=0x00
          	.EQU  __GPIOR1_INIT=0x00
          	.EQU  __GPIOR2_INIT=0x00
         
          __GLOBAL_INI_TBL:
          	.DW  0x03
000021 0003
          	.DW  _cher
000022 0226
          	.DW  _3*2
000023 0034
         
          	.DW  0x02
000024 0002
          	.DW  _cher_cnt
000025 0229
          	.DW  _4*2
000026 0038
         
          	.DW  0
000027 0000
         
          __RESET:
000028 94f8      	CLI
000029 27ee      	CLR  R30
00002a bbef      	OUT  EECR,R30
00002b bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
00002c e1f8      	LDI  R31,0x18
00002d b7a4      	IN   R26,MCUSR
00002e bfe4      	OUT  MCUSR,R30
00002f 93f0 0060 	STS  WDTCSR,R31
000031 93e0 0060 	STS  WDTCSR,R30
000033 bfa4      	OUT  MCUSR,R26
         
         ;CLEAR R2-R14
000034 e08d      	LDI  R24,13
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
          __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(0x200)
00003b e092      	LDI  R25,HIGH(0x200)
00003c e0a0      	LDI  R26,LOW(0x100)
00003d e0b1      	LDI  R27,HIGH(0x100)
          __CLEAR_SRAM:
00003e 93ed      	ST   X+,R30
00003f 9701      	SBIW R24,1
000040 f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
000041 e4e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000042 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
000043 9185      	LPM  R24,Z+
000044 9195      	LPM  R25,Z+
000045 9700      	SBIW R24,0
000046 f061      	BREQ __GLOBAL_INI_END
000047 91a5      	LPM  R26,Z+
000048 91b5      	LPM  R27,Z+
000049 9005      	LPM  R0,Z+
00004a 9015      	LPM  R1,Z+
00004b 01bf      	MOVW R22,R30
00004c 01f0      	MOVW R30,R0
          __GLOBAL_INI_LOOP:
00004d 9005      	LPM  R0,Z+
00004e 920d      	ST   X+,R0
00004f 9701      	SBIW R24,1
000050 f7e1      	BRNE __GLOBAL_INI_LOOP
000051 01fb      	MOVW R30,R22
000052 cff0      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;GPIOR0-GPIOR2 INITIALIZATION
000053 e0e0      	LDI  R30,__GPIOR0_INIT
000054 bbee      	OUT  GPIOR0,R30
000055 e0e0      	LDI  R30,__GPIOR1_INIT
000056 bdea      	OUT  GPIOR1,R30
000057 e0e0      	LDI  R30,__GPIOR2_INIT
000058 bdeb      	OUT  GPIOR2,R30
         
         ;STACK POINTER INITIALIZATION
000059 efef      	LDI  R30,LOW(0x2FF)
00005a bfed      	OUT  SPL,R30
00005b e0e2      	LDI  R30,HIGH(0x2FF)
00005c bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
00005d e8c0      	LDI  R28,LOW(0x180)
00005e e0d1      	LDI  R29,HIGH(0x180)
         
00005f c1de      	RJMP _main
         
          	.ESEG
          	.ORG 0
          	.DB  0 ; FIRST EEPROM LOCATION NOT USED, SEE ATMEL ERRATA SHEETS
000000 00
         
          	.DSEG
          	.ORG 0x180
         ;       1 //#define DEBUG
         ;       2 #define RELEASE
         ;       3 #define MIN_U	100
         ;       4 
         ;       5 #include <Mega48.h>
         ;       6 #include <delay.h> 
         ;       7 
         ;       8 #ifdef DEBUG
         ;       9 #include "usart.c"
         ;      10 #include "cmd.c"
         ;      11 #include <stdio.h>
         ;      12 #endif
         ;      13 
         ;      14 
         ;      15 #ifdef DEBUG
         ;      16 #define LED_NET PORTB.0
         ;      17 #define LED_PER PORTB.1
         ;      18 #define LED_DEL PORTB.2
         ;      19 #define KL1 PORTB.7
         ;      20 #define KL2 PORTB.6
         ;      21 #endif
         ;      22 
         ;      23 #ifdef RELEASE
         ;      24 #define LED_NET PORTD.0
         ;      25 #define LED_PER PORTD.1
         ;      26 #define LED_DEL PORTD.2
         ;      27 #define KL2 PORTD.3
         ;      28 #define KL1 PORTD.4
         ;      29 #endif
         ;      30 
         ;      31 bit bT0;
         ;      32 bit b100Hz;
         ;      33 bit b10Hz;
         ;      34 bit b5Hz;
         ;      35 bit b2Hz;
         ;      36 bit b1Hz;
         ;      37 //bit n_but;
         ;      38 
         ;      39 char t0_cnt0,t0_cnt1,t0_cnt2,t0_cnt3/*,t0_cnt4*/;
         ;      40 unsigned int bankA,bankB,bankC;
         ;      41 unsigned int adc_bankU[3][25]/*,ADCU*/,adc_bankU_[3];
          _adc_bankU:
000180      	.BYTE 0x96
          _adc_bankU_:
000216      	.BYTE 0x6
         ;      42 unsigned int del_cnt;
          _del_cnt:
00021c      	.BYTE 0x2
         ;      43 char flags;
          _flags:
00021e      	.BYTE 0x1
         ;      44 char deltas;
          _deltas:
00021f      	.BYTE 0x1
         ;      45 char adc_cntA,adc_cntB,adc_cntC;
          _adc_cntA:
000220      	.BYTE 0x1
          _adc_cntB:
000221      	.BYTE 0x1
          _adc_cntC:
000222      	.BYTE 0x1
         ;      46 bit bA_,bB_,bC_;
         ;      47 bit bA,bB,bC;
         ;      48 unsigned int adc_data;
          _adc_data:
000223      	.BYTE 0x2
         ;      49 char cnt_x;
          _cnt_x:
000225      	.BYTE 0x1
         ;      50 char cher[3]={5,6,7};
          _cher:
000226      	.BYTE 0x3
         ;      51 int cher_cnt=25; 
          _cher_cnt:
000229      	.BYTE 0x2
         ;      52 //char reset_cnt=25;
         ;      53 char pcnt[3];
          _pcnt:
00022b      	.BYTE 0x3
         ;      54 bit bPER,bPER_,bCHER_;
         ;      55 bit bNN,bNN_;
         ;      56 enum char {iMn,iSet}ind;
          _ind:
00022e      	.BYTE 0x1
         ;      57 bit bFl;
         ;      58 eeprom char delta; 
         
          	.ESEG
          _delta:
          	.DB  0x0
000001 00
         ;      59 char cnt_butS,cnt_butR; 
         
          	.DSEG
          _cnt_butS:
00022f      	.BYTE 0x1
          _cnt_butR:
000230      	.BYTE 0x1
         ;      60 bit butR,butS;
         ;      61 flash char DF[]={0,10,15,20,25,30,35};
         
          	.CSEG
         ;      62 char per_cnt;
         
          	.DSEG
          _per_cnt:
000231      	.BYTE 0x1
         ;      63 char nn_cnt;
          _nn_cnt:
000232      	.BYTE 0x1
         ;      64 //-----------------------------------------------
         ;      65 void t0_init(void)
         ;      66 {
         
          	.CSEG
          _t0_init:
         ;      67 /*
         ;      68 TCCR0=0x03;
         ;      69 TCNT0=-78;
         ;      70 TIMSK|=0b00000001; */
         ;      71 TCCR0A=0x00;
000060 e0e0      	LDI  R30,LOW(0)
000061 bde4      	OUT  0x24,R30
         ;      72 TCCR0B=0x04;
000062 e0e4      	LDI  R30,LOW(4)
000063 bde5      	OUT  0x25,R30
         ;      73 TCNT0=-39;
000064 ede9      	LDI  R30,LOW(217)
000065 bde6      	OUT  0x26,R30
         ;      74 OCR0A=0x00;
000066 e0e0      	LDI  R30,LOW(0)
000067 bde7      	OUT  0x27,R30
         ;      75 OCR0B=0x00;
000068 bde8      	OUT  0x28,R30
         ;      76 } 
000069 9508      	RET
         ;      77 
         ;      78 /*//-----------------------------------------------
         ;      79 void t2_init(void)
         ;      80 {
         ;      81 //TIFR|=0b01000000;
         ;      82 TCNT2=-97;
         ;      83 TCCR2=0x07;
         ;      84 OCR2=-80;
         ;      85 TIMSK|=0b11000000;
         ;      86 }  */
         ;      87 
         ;      88 //-----------------------------------------------
         ;      89 void del_init(void)
         ;      90 {
          _del_init:
         ;      91 if(!del_cnt) del_cnt=300;
00006a 91e0 021c 	LDS  R30,_del_cnt
00006c 91f0 021d 	LDS  R31,_del_cnt+1
00006e 9730      	SBIW R30,0
00006f f431      	BRNE _0x5
000070 e2ec      	LDI  R30,LOW(300)
000071 e0f1      	LDI  R31,HIGH(300)
000072 93e0 021c 	STS  _del_cnt,R30
000074 93f0 021d 	STS  _del_cnt+1,R31
         ;      92 } 
          _0x5:
000076 9508      	RET
         ;      93 
         ;      94 //-----------------------------------------------
         ;      95 void del_hndl(void)
         ;      96 {
         ;      97 if((del_cnt)&&(!bCHER_)) del_cnt--;
         ;      98 } 
         ;      99 
         ;     100 //-----------------------------------------------
         ;     101 void ind_hndl(void)
         ;     102 {
         ;     103 #ifdef DEBUG
         ;     104 DDRB|=0x07;
         ;     105 #endif
         ;     106 
         ;     107 #ifdef RELEASE
         ;     108 DDRD|=0x07;   
         ;     109 #endif
         ;     110  
         ;     111 if(ind==iMn)
         ;     112 	{
         ;     113 	if(bCHER_)
         ;     114 		{
         ;     115 		LED_NET=bFl;
         ;     116 		}
         ;     117 	else LED_NET=0;
         ;     118 	
         ;     119 	if(del_cnt||bCHER_)
         ;     120 		{
         ;     121 		LED_DEL=0;
         ;     122 		}
         ;     123 	else LED_DEL=1;
         ;     124 
         ;     125 	if(bNN_)
         ;     126 		{
         ;     127 		LED_PER=bFl;
         ;     128 		}
         ;     129 
         ;     130 	else if(bPER)
         ;     131 		{
         ;     132 		LED_PER=0;
         ;     133 		}		
         ;     134 
         ;     135 	else LED_PER=1;	
         ;     136 				
         ;     137 	}
         ;     138 else if(ind==iSet)
         ;     139 	{
         ;     140 	#ifdef DEBUG 
         ;     141 	if(bFl) PORTB|=0x07;
         ;     142 	else PORTB&=(delta^0xff)|0xf8;
         ;     143 	#endif
         ;     144 	
         ;     145 	#ifdef RELEASE 
         ;     146 	if(bFl) PORTD|=0x07;
         ;     147 	else PORTD&=(delta^0xff)|0xf8;
         ;     148 	#endif
         ;     149 	
         ;     150 	}	
         ;     151 }
         ;     152 
         ;     153 //-----------------------------------------------
         ;     154 void out_out(void)
         ;     155 {
         ;     156 #ifdef DEBUG
         ;     157 DDRB|=0xc0;   
         ;     158 #endif
         ;     159 
         ;     160 #ifdef RELEASE
         ;     161 DDRD|=0x18;   
         ;     162 #endif    
         ;     163 
         ;     164 if((!del_cnt)&&(!bPER_)&&(!bCHER_)&&(!bNN_))
         ;     165 	{
         ;     166 	KL1=1;
         ;     167 	flags|=0x02;
         ;     168 	}
         ;     169 else 
         ;     170 	{
         ;     171 	KL1=0;
         ;     172 	flags&=0xfD;
         ;     173 	}	
         ;     174 	
         ;     175 if((!bPER_)&&(!bCHER_)&&(!bNN_))
         ;     176 	{
         ;     177 	KL2=1;
         ;     178 	flags|=0x08;
         ;     179 	}
         ;     180 else 
         ;     181 	{
         ;     182 	KL2=0;
         ;     183 	flags&=0xf7;
         ;     184 	}		
         ;     185 }
         ;     186 
         ;     187 //-----------------------------------------------
         ;     188 void per_drv(void)
         ;     189 {
         ;     190 char max_,min_;
         ;     191 signed long temp_SL;
         ;     192 if((adc_bankU_[0]>=adc_bankU_[1])&&(adc_bankU_[0]>=adc_bankU_[2])) max_=0; 
         ;	max_ -> R16
         ;	min_ -> R17
         ;	temp_SL -> Y+2
         ;     193 else if(adc_bankU_[1]>=adc_bankU_[2]) max_=1; 
         ;     194 else max_=2;  
         ;     195 
         ;     196 if((adc_bankU_[0]<=adc_bankU_[1])&&(adc_bankU_[0]<=adc_bankU_[2])) min_=0; 
         ;     197 else if(adc_bankU_[1]<=adc_bankU_[2]) min_=1; 
         ;     198 else min_=2; 
         ;     199 
         ;     200 temp_SL=adc_bankU_[max_]*(long)DF[delta]/100;
         ;     201 if((adc_bankU_[max_]-adc_bankU_[min_])>=(int)temp_SL)
         ;     202 	{
         ;     203 	bPER=1;
         ;     204 
         ;     205 	flags|=0x01;
         ;     206 	}      
         ;     207 else
         ;     208 	{
         ;     209 	bPER=0;   
         ;     210 
         ;     211 	flags&=0xfe;
         ;     212 	}
         ;     213 //	bPER=0;	
         ;     214 }
         ;     215 
         ;     216 //-----------------------------------------------
         ;     217 void nn_drv(void)
         ;     218 {
         ;     219 if((adc_bankU_[0]<=MIN_U)&&(adc_bankU_[1]<=MIN_U)&&(adc_bankU_[2]<=MIN_U))
         ;     220 	{
         ;     221 	bNN=1;
         ;     222 	}      
         ;     223 else
         ;     224 	{
         ;     225 	bNN=0;   
         ;     226 	}
         ;     227 }
         ;     228 
         ;     229 //-----------------------------------------------
         ;     230 void per_hndl(void)
         ;     231 {
         ;     232 if(!bPER)
         ;     233 	{
         ;     234 	per_cnt=0;
         ;     235 	bPER_=0;
         ;     236 	flags&=0xfB;
         ;     237 	}
         ;     238 else
         ;     239 	{
         ;     240 	if(per_cnt<5)
         ;     241 		{
         ;     242 		if(++per_cnt>=5)
         ;     243 			{
         ;     244 			bPER_=1;
         ;     245 			flags|=0x04;
         ;     246 			del_init();
         ;     247 			}
         ;     248 		}
         ;     249 	}	
         ;     250 }
         ;     251 
         ;     252 //-----------------------------------------------
         ;     253 void nn_hndl(void)
         ;     254 {
         ;     255 if(!bNN)
         ;     256 	{
         ;     257 	nn_cnt=0;
         ;     258 	bNN_=0;
         ;     259 	
         ;     260 	}
         ;     261 else
         ;     262 	{
         ;     263 	if(nn_cnt<5)
         ;     264 		{
         ;     265 		if(++nn_cnt>=5)
         ;     266 			{
         ;     267 			bNN_=1;
         ;     268 			del_init();
         ;     269 			}
         ;     270 		}
         ;     271 	}	
         ;     272 }
         ;     273 
         ;     274 //-----------------------------------------------
         ;     275 void pcnt_hndl(void)
         ;     276 {
         ;     277 if(pcnt[0])
         ;     278 	{
         ;     279 	pcnt[0]--;
         ;     280 	if(pcnt[0]==0) adc_bankU_[0]=0;
         ;     281 	}
         ;     282 if(pcnt[1])
         ;     283 	{
         ;     284 	pcnt[1]--;
         ;     285 	if(pcnt[1]==0) adc_bankU_[1]=0;
         ;     286 	}
         ;     287 if(pcnt[2])
         ;     288 	{
         ;     289 	pcnt[2]--;
         ;     290 	if(pcnt[2]==0) adc_bankU_[2]=0;
         ;     291 	}		
         ;     292 }
         ;     293 
         ;     294 /*//-----------------------------------------------
         ;     295 void gran_char(signed char *adr, signed char min, signed char max)
         ;     296 {
         ;     297 if (*adr<min) *adr=min;
         ;     298 if (*adr>max) *adr=max; 
         ;     299 } */
         ;     300 
         ;     301 
         ;     302 #ifdef DEBUG
         ;     303 
         ;     304 
         ;     305 
         ;     306 //-----------------------------------------------
         ;     307 char index_offset (signed char index,signed char offset)
         ;     308 {
         ;     309 index=index+offset;
         ;     310 if(index>=RX_BUFFER_SIZE) index-=RX_BUFFER_SIZE; 
         ;     311 if(index<0) index+=RX_BUFFER_SIZE;
         ;     312 return index;
         ;     313 }
         ;     314 
         ;     315 //-----------------------------------------------
         ;     316 char control_check(char index)
         ;     317 {
         ;     318 char i=0,ii=0,iii;
         ;     319 
         ;     320 if(rx_buffer[index]!=END) goto error_cc;
         ;     321 
         ;     322 ii=rx_buffer[index_offset(index,-2)];
         ;     323 iii=0;
         ;     324 for(i=0;i<=ii;i++)
         ;     325 	{
         ;     326 	iii^=rx_buffer[index_offset(index,-2-ii+i)];
         ;     327 	}
         ;     328 if (iii!=rx_buffer[index_offset(index,-1)]) goto error_cc;	
         ;     329 
         ;     330 
         ;     331 success_cc:
         ;     332 return 1;
         ;     333 goto end_cc;
         ;     334 error_cc:
         ;     335 return 0;
         ;     336 goto end_cc;
         ;     337 
         ;     338 end_cc:
         ;     339 }
         ;     340 
         ;     341 
         ;     342 //-----------------------------------------------
         ;     343 void OUT (char num,char data0,char data1,char data2,char data3,char data4,char data5)
         ;     344 {
         ;     345 char i,t=0;
         ;     346 //char *ptr=&data1;
         ;     347 char UOB[6]; 
         ;     348 UOB[0]=data0;
         ;     349 UOB[1]=data1;
         ;     350 UOB[2]=data2;
         ;     351 UOB[3]=data3;
         ;     352 UOB[4]=data4;
         ;     353 UOB[5]=data5;
         ;     354 for (i=0;i<num;i++)
         ;     355 	{
         ;     356 	t^=UOB[i];
         ;     357 	}    
         ;     358 UOB[num]=num;
         ;     359 t^=UOB[num];
         ;     360 UOB[num+1]=t;
         ;     361 UOB[num+2]=END;
         ;     362 
         ;     363 for (i=0;i<num+3;i++)
         ;     364 	{
         ;     365 	putchar(UOB[i]);
         ;     366 	}   	
         ;     367 }
         ;     368 
         ;     369 //-----------------------------------------------
         ;     370 void OUT_adr (char *ptr, char len)
         ;     371 {
         ;     372 char UOB[20]={0,0,0,0,0,0,0,0,0,0};
         ;     373 char i,t=0;
         ;     374 
         ;     375 for(i=0;i<len;i++)
         ;     376 	{
         ;     377 	UOB[i]=ptr[i];
         ;     378 	t^=UOB[i];
         ;     379 	}
         ;     380 //if(!t)t=0xff;
         ;     381 UOB[len]=len;
         ;     382 t^=len;	
         ;     383 UOB[len+1]=t;	
         ;     384 UOB[len+2]=END;
         ;     385 //UOB[0]=i+1;
         ;     386 //UOB[i]=t^UOB[0];
         ;     387 //UOB[i+1]=END;
         ;     388 	
         ;     389 //puts(UOB); 
         ;     390 for (i=0;i<len+3;i++)
         ;     391 	{
         ;     392 	putchar(UOB[i]);
         ;     393 	}   
         ;     394 }
         ;     395 
         ;     396 //-----------------------------------------------
         ;     397 void UART_IN_AN(void)
         ;     398 {
         ;     399 char temp_char;
         ;     400 int temp_int;
         ;     401 signed long int temp_intL;
         ;     402 
         ;     403 if((UIB[0]==CMND)&&(UIB[1]==QWEST))
         ;     404 	{
         ;     405 
         ;     406 	}
         ;     407 else if((UIB[0]==CMND)&&(UIB[1]==GETID))
         ;     408 	{
         ;     409 
         ;     410           
         ;     411 	}	
         ;     412 
         ;     413 }
         ;     414 
         ;     415 //-----------------------------------------------
         ;     416 void UART_IN(void)
         ;     417 {
         ;     418 //static char flag;
         ;     419 char temp,i,count;
         ;     420 if(!bRXIN) goto UART_IN_end;
         ;     421 #asm("cli")
         ;     422 //char* ptr;
         ;     423 //char i=0,t=0;
         ;     424 //int it=0;
         ;     425 //signed long int char_int;
         ;     426 //if(!bRXIN) goto UART_IN_end;
         ;     427 //bRXIN=0;
         ;     428 //count=rx_counter;
         ;     429 //OUT(0x01,0,0,0,0,0);
         ;     430 if(rx_buffer_overflow)
         ;     431 	{
         ;     432 	rx_wr_index=0;
         ;     433 	rx_rd_index=0;
         ;     434 	rx_counter=0;
         ;     435 	rx_buffer_overflow=0;
         ;     436 	}    
         ;     437 	
         ;     438 if(rx_counter&&(rx_buffer[index_offset(rx_wr_index,-1)])==END)
         ;     439 	{
         ;     440      temp=rx_buffer[index_offset(rx_wr_index,-3)];
         ;     441     	if(temp<10) 
         ;     442     		{
         ;     443     		if(control_check(index_offset(rx_wr_index,-1)))
         ;     444     			{
         ;     445     			rx_rd_index=index_offset(rx_wr_index,-3-temp);
         ;     446     			for(i=0;i<temp;i++)
         ;     447 				{
         ;     448 				UIB[i]=rx_buffer[index_offset(rx_rd_index,i)];
         ;     449 				} 
         ;     450 			rx_rd_index=rx_wr_index;
         ;     451 			rx_counter=0;
         ;     452 			UART_IN_AN();
         ;     453 
         ;     454     			}
         ;     455  	
         ;     456     		} 
         ;     457     	}	
         ;     458 
         ;     459 UART_IN_end:
         ;     460 bRXIN=0;
         ;     461 #asm("sei")     
         ;     462 } 
         ;     463 
         ;     464 #endif
         ;     465 
         ;     466     
         ;     467  
         ;     468 
         ;     469 
         ;     470 
         ;     471 
         ;     472 
         ;     473 
         ;     474 //-----------------------------------------------
         ;     475 void but_drv(void)
         ;     476 {
         ;     477 #ifdef DEBUG
         ;     478 #define PINR PIND.2
         ;     479 #define PORTR PORTD.2
         ;     480 #define DDR DDRD.2
         ;     481 
         ;     482 #define PINS PIND.3
         ;     483 #define PORTS PORTD.3
         ;     484 #define DDS DDRD.3
         ;     485 #endif
         ;     486 
         ;     487 #ifdef RELEASE
         ;     488 #define PINR PINC.4
         ;     489 #define PORTR PORTC.4
         ;     490 #define DDR DDRC.4
         ;     491 
         ;     492 #define PINS PINC.5
         ;     493 #define PORTS PORTC.5
         ;     494 #define DDS DDRC.5
         ;     495 #endif
         ;     496 
         ;     497 
         ;     498 DDR=0;
         ;     499 DDS=0;
         ;     500 PORTR=1;
         ;     501 PORTS=1; 
         ;     502       
         ;     503 if(!PINR)
         ;     504 	{
         ;     505 	if(cnt_butR<10)
         ;     506 		{
         ;     507 		if(++cnt_butR>=10)
         ;     508 			{
         ;     509 			butR=1;
         ;     510 			}
         ;     511 		}
         ;     512 	}                 
         ;     513 else 
         ;     514 	{
         ;     515 	cnt_butR=0;
         ;     516 	butR=0;
         ;     517 	}	 
         ;     518 	
         ;     519 if(!PINS)
         ;     520 	{
         ;     521 	if(cnt_butS<200)
         ;     522 		{
         ;     523 		if(++cnt_butS>=200)
         ;     524 			{
         ;     525 			butS=1;
         ;     526 			}
         ;     527 		}
         ;     528 	}                 
         ;     529 else 
         ;     530 	{
         ;     531 	cnt_butS=0;
         ;     532 	butS=0;
         ;     533 	}		
         ;     534 	           
         ;     535 }
         ;     536 
         ;     537 //-----------------------------------------------
         ;     538 void but_an(void)
         ;     539 {
         ;     540 if(ind==iMn)
         ;     541 	{
         ;     542 	if(butS) ind=iSet;
         ;     543 	if(butR)
         ;     544 		{
         ;     545 		if(del_cnt) del_cnt=0;
         ;     546 		}
         ;     547 	}
         ;     548 else if(ind==iSet)
         ;     549 	{            
         ;     550 	if(butR)
         ;     551 		{
         ;     552 		if(delta<6) delta++;
         ;     553 		else delta=1;
         ;     554 		}
         ;     555 	if(butS) ind=iMn;	
         ;     556 	}
         ;     557 but_an_end:
         ;     558 butR=0;
         ;     559 butS=0;
         ;     560 }
         ;     561 
         ;     562 
         ;     563 
         ;     564 
         ;     565 
         ;     566 
         ;     567 
         ;     568 
         ;     569 
         ;     570 
         ;     571 
         ;     572 //***********************************************
         ;     573 //***********************************************
         ;     574 //***********************************************
         ;     575 //***********************************************
         ;     576 interrupt [TIM0_OVF] void timer0_ovf_isr(void)
         ;     577 {
          _timer0_ovf_isr:
000077 920a      	ST   -Y,R0
000078 921a      	ST   -Y,R1
000079 92fa      	ST   -Y,R15
00007a 936a      	ST   -Y,R22
00007b 937a      	ST   -Y,R23
00007c 938a      	ST   -Y,R24
00007d 939a      	ST   -Y,R25
00007e 93aa      	ST   -Y,R26
00007f 93ba      	ST   -Y,R27
000080 93ea      	ST   -Y,R30
000081 93fa      	ST   -Y,R31
000082 b7ef      	IN   R30,SREG
000083 93ea      	ST   -Y,R30
         ;     578 t0_init();
000084 dfdb      	RCALL _t0_init
         ;     579 bT0=!bT0;
000085 94e8      	CLT
000086 9bf0      	SBIS 0x1E,0
000087 9468      	SET
000088 b3ee      	IN   R30,0x1E
000089 f9e0      	BLD  R30,0
00008a bbee      	OUT  0x1E,R30
         ;     580 
         ;     581 if(!bT0) goto lbl_000;
00008b 9bf0      	SBIS 0x1E,0
00008c c01f      	RJMP _0x54
         ;     582 b100Hz=1;
00008d 9af1      	SBI  0x1E,1
         ;     583 if(++t0_cnt0>=10)
00008e 9453      	INC  R5
00008f e0ea      	LDI  R30,LOW(10)
000090 165e      	CP   R5,R30
000091 f040      	BRLO _0x55
         ;     584 	{
         ;     585 	t0_cnt0=0;
000092 2455      	CLR  R5
         ;     586 	b10Hz=1;
000093 9af2      	SBI  0x1E,2
         ;     587 	bFl=!bFl;
000094 94e8      	CLT
000095       	SBIS 0x2B,1
error : Illegal argument type or count
000096 9468      	SET
000097 b5eb      	IN   R30,0x2B
000098 f9e1      	BLD  R30,1
000099 bdeb      	OUT  0x2B,R30
         ;     588 
         ;     589 	} 
         ;     590 if(++t0_cnt1>=20)
          _0x55:
00009a 9463      	INC  R6
00009b e1e4      	LDI  R30,LOW(20)
00009c 166e      	CP   R6,R30
00009d f010      	BRLO _0x56
         ;     591 	{
         ;     592 	t0_cnt1=0;
00009e 2466      	CLR  R6
         ;     593 	b5Hz=1;
00009f 9af3      	SBI  0x1E,3
         ;     594 
         ;     595 	}
         ;     596 if(++t0_cnt2>=50)
          _0x56:
0000a0 9473      	INC  R7
0000a1 e3e2      	LDI  R30,LOW(50)
0000a2 167e      	CP   R7,R30
0000a3 f010      	BRLO _0x57
         ;     597 	{
         ;     598 	t0_cnt2=0;
0000a4 2477      	CLR  R7
         ;     599 	b2Hz=1;
0000a5 9af4      	SBI  0x1E,4
         ;     600 	}	
         ;     601 		
         ;     602 if(++t0_cnt3>=100)
          _0x57:
0000a6 9483      	INC  R8
0000a7 e6e4      	LDI  R30,LOW(100)
0000a8 168e      	CP   R8,R30
0000a9 f010      	BRLO _0x58
         ;     603 	{
         ;     604 	t0_cnt3=0;
0000aa 2488      	CLR  R8
         ;     605 	b1Hz=1;
0000ab 9af5      	SBI  0x1E,5
         ;     606 	}		
         ;     607 lbl_000:
          _0x58:
          _0x54:
         ;     608 }
0000ac 91e9      	LD   R30,Y+
0000ad bfef      	OUT  SREG,R30
0000ae 91f9      	LD   R31,Y+
0000af 91e9      	LD   R30,Y+
0000b0 91b9      	LD   R27,Y+
0000b1 91a9      	LD   R26,Y+
0000b2 9199      	LD   R25,Y+
0000b3 9189      	LD   R24,Y+
0000b4 9179      	LD   R23,Y+
0000b5 9169      	LD   R22,Y+
0000b6 90f9      	LD   R15,Y+
0000b7 9019      	LD   R1,Y+
0000b8 9009      	LD   R0,Y+
0000b9 9518      	RETI
         ;     609 /*
         ;     610 //-----------------------------------------------
         ;     611 // Timer 2 output compare interrupt service routine
         ;     612 interrupt [TIM2_OVF] void timer2_ovf_isr(void)
         ;     613 {
         ;     614 t2_init();
         ;     615 
         ;     616 
         ;     617 
         ;     618 }
         ;     619 
         ;     620 //-----------------------------------------------
         ;     621 // Timer 2 output compare interrupt service routine
         ;     622 interrupt [TIM2_COMP] void timer2_comp_isr(void)
         ;     623 {
         ;     624 
         ;     625 	
         ;     626 
         ;     627 } 
         ;     628 */
         ;     629 
         ;     630 //-----------------------------------------------
         ;     631 //#pragma savereg-
         ;     632 interrupt [ADC_INT] void adc_isr(void)
         ;     633 {
          _adc_isr:
0000ba 920a      	ST   -Y,R0
0000bb 921a      	ST   -Y,R1
0000bc 939a      	ST   -Y,R25
0000bd 93aa      	ST   -Y,R26
0000be 93ba      	ST   -Y,R27
0000bf 93ea      	ST   -Y,R30
0000c0 93fa      	ST   -Y,R31
0000c1 b7ef      	IN   R30,SREG
0000c2 93ea      	ST   -Y,R30
         ;     634 
         ;     635 register static unsigned char input_index=0;
         
          	.DSEG
          _input_index_SD:
000233      	.BYTE 0x1
         
          	.CSEG
         ;     636 // Read the AD conversion result
         ;     637 adc_data=ADCW;
0000c3 91e0 0078 	LDS  R30,120
0000c5 91f0 0079 	LDS  R31,120+1
0000c7 93e0 0223 	STS  _adc_data,R30
0000c9 93f0 0224 	STS  _adc_data+1,R31
         ;     638 
         ;     639 if (++input_index > 2)
0000cb 91a0 0233 	LDS  R26,_input_index_SD
0000cd 5faf      	SUBI R26,-LOW(1)
0000ce 93a0 0233 	STS  _input_index_SD,R26
0000d0 e0e2      	LDI  R30,LOW(2)
0000d1 17ea      	CP   R30,R26
0000d2 f418      	BRSH _0x59
         ;     640    input_index=0;
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93e0 0233 	STS  _input_index_SD,R30
         ;     641 #ifdef DEBUG
         ;     642 ADMUX=(0b01000011)+input_index;
         ;     643 #endif
         ;     644 #ifdef RELEASE
         ;     645 ADMUX=0b01000000+input_index;
          _0x59:
0000d6 91e0 0233 	LDS  R30,_input_index_SD
0000d8 5ce0      	SUBI R30,-LOW(64)
0000d9 93e0 007c 	STS  0x7C,R30
         ;     646 #endif
         ;     647 
         ;     648 // Start the AD conversion
         ;     649 ADCSRA|=0x40;
0000db 91e0 007a 	LDS  R30,122
0000dd 64e0      	ORI  R30,0x40
0000de 93e0 007a 	STS  122,R30
         ;     650 
         ;     651 if(input_index==1)
0000e0 91a0 0233 	LDS  R26,_input_index_SD
0000e2 30a1      	CPI  R26,LOW(0x1)
0000e3 f009      	BREQ PC+2
0000e4 c05d      	RJMP _0x5A
         ;     652 	{
         ;     653  	if((adc_data>100)&&!bA_)
0000e5 d18a      	RCALL SUBOPT_0x0
0000e6 f410      	BRSH _0x5C
0000e7 9bf6      	SBIS 0x1E,6
0000e8 c001      	RJMP _0x5D
          _0x5C:
0000e9 c002      	RJMP _0x5B
          _0x5D:
         ;     654     		{
         ;     655     		bA_=1;
0000ea 9af6      	SBI  0x1E,6
         ;     656     		cnt_x++;
0000eb d18d      	RCALL SUBOPT_0x1
         ;     657     		}
         ;     658     	if((adc_data<100)&&bA_)
          _0x5B:
0000ec d192      	RCALL SUBOPT_0x2
0000ed f410      	BRSH _0x5F
0000ee 99f6      	SBIC 0x1E,6
0000ef c001      	RJMP _0x60
          _0x5F:
0000f0 c001      	RJMP _0x5E
          _0x60:
         ;     659     		{
         ;     660     		bA_=0;
0000f1 98f6      	CBI  0x1E,6
         ;     661     		}			
         ;     662 //	adc_data
         ;     663 	if(adc_data>10U)
          _0x5E:
0000f2 d194      	RCALL SUBOPT_0x3
0000f3 f458      	BRSH _0x61
         ;     664 		{
         ;     665 		bankA+=adc_data;
0000f4 91e0 0223 	LDS  R30,_adc_data
0000f6 91f0 0224 	LDS  R31,_adc_data+1
0000f8   +  	__ADDWRR 9,10,30,31
         ;     666 		bA=1;
0000fa       	SBI  0x2A,1
error : Illegal argument type or count
         ;     667 		pcnt[0]=10;
0000fb e0ea      	LDI  R30,LOW(10)
0000fc 93e0 022b 	STS  _pcnt,R30
         ;     668 		}
         ;     669 	else if((adc_data<=10U)&&bA)
0000fe c043      	RJMP _0x62
          _0x61:
0000ff d187      	RCALL SUBOPT_0x3
000100 f010      	BRLO _0x64
000101       	SBIC 0x2A,1
error : Illegal argument type or count
000102 c001      	RJMP _0x65
          _0x64:
000103 c03e      	RJMP _0x63
          _0x65:
         ;     670 		{
         ;     671 		bA=0;
000104       	CBI  0x2A,1
error : Illegal argument type or count
         ;     672 		
         ;     673 		adc_bankU[0,adc_cntA]=bankA/10;
000105 91e0 0220 	LDS  R30,_adc_cntA
000107 d188      	RCALL SUBOPT_0x4
000108 0fea      	ADD  R30,R26
000109 1ffb      	ADC  R31,R27
00010a 93ff      	PUSH R31
00010b 93ef      	PUSH R30
00010c   +  	__GETW2R 9,10
00010e d187      	RCALL SUBOPT_0x5
00010f 91af      	POP  R26
000110 91bf      	POP  R27
000111 d1d6      	RCALL __PUTWP1
         ;     674 		bankA=0;
000112 2499      	CLR  R9
000113 24aa      	CLR  R10
         ;     675 		if(++adc_cntA>=25) 
000114 91a0 0220 	LDS  R26,_adc_cntA
000116 5faf      	SUBI R26,-LOW(1)
000117 93a0 0220 	STS  _adc_cntA,R26
000119 31a9      	CPI  R26,LOW(0x19)
00011a f138      	BRLO _0x66
         ;     676 			{
         ;     677 			char i;
         ;     678 			adc_cntA=0;
00011b d17e      	RCALL SUBOPT_0x6
         ;	i -> Y+0
00011c 93e0 0220 	STS  _adc_cntA,R30
         ;     679 			adc_bankU_[0]=0;
00011e e0e0      	LDI  R30,LOW(0)
00011f e0f0      	LDI  R31,HIGH(0)
000120 93e0 0216 	STS  _adc_bankU_,R30
000122 93f0 0217 	STS  _adc_bankU_+1,R31
         ;     680 			for(i=0;i<25;i++)
000124 d178      	RCALL SUBOPT_0x7
          _0x68:
000125 d17a      	RCALL SUBOPT_0x8
000126 f498      	BRSH _0x69
         ;     681 				{
         ;     682 				adc_bankU_[0]+=adc_bankU[0,i];
000127 e1a6      	LDI  R26,LOW(_adc_bankU_)
000128 e0b2      	LDI  R27,HIGH(_adc_bankU_)
000129 93bf      	PUSH R27
00012a 93af      	PUSH R26
00012b d1b8      	RCALL __GETW1P
00012c 93ff      	PUSH R31
00012d 93ef      	PUSH R30
00012e 81e8      	LD   R30,Y
00012f d160      	RCALL SUBOPT_0x4
000130 d172      	RCALL SUBOPT_0x9
000131 91af      	POP  R26
000132 91bf      	POP  R27
000133 0fea      	ADD  R30,R26
000134 1ffb      	ADC  R31,R27
000135 91af      	POP  R26
000136 91bf      	POP  R27
000137 d1b0      	RCALL __PUTWP1
         ;     683 				}
000138 d16e      	RCALL SUBOPT_0xA
000139 cfeb      	RJMP _0x68
          _0x69:
         ;     684 			adc_bankU_[0]/=25;	
00013a e1a6      	LDI  R26,LOW(_adc_bankU_)
00013b e0b2      	LDI  R27,HIGH(_adc_bankU_)
00013c 93bf      	PUSH R27
00013d 93af      	PUSH R26
00013e d16c      	RCALL SUBOPT_0xB
00013f 91af      	POP  R26
000140 91bf      	POP  R27
000141 d16f      	RCALL SUBOPT_0xC
         ;     685 			}	
         ;     686 		}
          _0x66:
         ;     687 	//adc_bankU_[0]		          
         ;     688 	}  
          _0x63:
          _0x62:
         ;     689 if(input_index==2)
          _0x5A:
000142 91a0 0233 	LDS  R26,_input_index_SD
000144 30a2      	CPI  R26,LOW(0x2)
000145 f009      	BREQ PC+2
000146 c085      	RJMP _0x6A
         ;     690 	{
         ;     691  	if((adc_data>100)&&!bB_)
000147 d128      	RCALL SUBOPT_0x0
000148 f410      	BRSH _0x6C
000149 9bf7      	SBIS 0x1E,7
00014a c001      	RJMP _0x6D
          _0x6C:
00014b c027      	RJMP _0x6B
          _0x6D:
         ;     692     		{
         ;     693     		bB_=1;
00014c 9af7      	SBI  0x1E,7
         ;     694     		cnt_x++;
00014d d12b      	RCALL SUBOPT_0x1
         ;     695     		cher[0]=cnt_x;
00014e 91e0 0225 	LDS  R30,_cnt_x
000150 93e0 0226 	STS  _cher,R30
         ;     696    // 		cnt_x=2;
         ;     697     		if(cnt_x==2)
000152 91a0 0225 	LDS  R26,_cnt_x
000154 30a2      	CPI  R26,LOW(0x2)
000155 f479      	BRNE _0x6E
         ;     698     			{
         ;     699     			if(cher_cnt<50)
000156 d15d      	RCALL SUBOPT_0xD
000157 f464      	BRGE _0x6F
         ;     700 				{
         ;     701 				cher_cnt++;
000158 91e0 0229 	LDS  R30,_cher_cnt
00015a 91f0 022a 	LDS  R31,_cher_cnt+1
00015c 9631      	ADIW R30,1
00015d 93e0 0229 	STS  _cher_cnt,R30
00015f 93f0 022a 	STS  _cher_cnt+1,R31
         ;     702 				if((cher_cnt>=50)/*&&reset_cnt*/) bCHER_=1;//cher_alarm(0);
000161 d152      	RCALL SUBOPT_0xD
000162 f00c      	BRLT _0x70
000163       	SBI  0x2A,6
error : Illegal argument type or count
         ;     703 		     	}
          _0x70:
         ;     704     			}
          _0x6F:
         ;     705     		else
000164 c00e      	RJMP _0x71
          _0x6E:
         ;     706     			{
         ;     707     			if(cher_cnt)
000165 d156      	RCALL SUBOPT_0xE
000166 f061      	BREQ _0x72
         ;     708 				{
         ;     709 				cher_cnt--;
000167 91e0 0229 	LDS  R30,_cher_cnt
000169 91f0 022a 	LDS  R31,_cher_cnt+1
00016b 9731      	SBIW R30,1
00016c 93e0 0229 	STS  _cher_cnt,R30
00016e 93f0 022a 	STS  _cher_cnt+1,R31
         ;     710 				if((cher_cnt==0)/*&&reset_cnt*/) bCHER_=0;//cher_alarm(1);
000170 d14b      	RCALL SUBOPT_0xE
000171 f409      	BRNE _0x73
000172       	CBI  0x2A,6
error : Illegal argument type or count
         ;     711 		     	}
          _0x73:
         ;     712     			}
          _0x72:
          _0x71:
         ;     713   //  		bCHER_=0;			 
         ;     714     		}
         ;     715     	if((adc_data<100)&&bB_)
          _0x6B:
000173 d10b      	RCALL SUBOPT_0x2
000174 f410      	BRSH _0x75
000175 99f7      	SBIC 0x1E,7
000176 c001      	RJMP _0x76
          _0x75:
000177 c001      	RJMP _0x74
          _0x76:
         ;     716     		{
         ;     717     		bB_=0;
000178 98f7      	CBI  0x1E,7
         ;     718     		}	
         ;     719 	
         ;     720  	if(adc_data>10)
          _0x74:
000179 d10d      	RCALL SUBOPT_0x3
00017a f458      	BRSH _0x77
         ;     721 		{
         ;     722 		bankB+=adc_data;
00017b 91e0 0223 	LDS  R30,_adc_data
00017d 91f0 0224 	LDS  R31,_adc_data+1
00017f   +  	__ADDWRR 11,12,30,31
         ;     723 		pcnt[1]=10;
000181 e0ea      	LDI  R30,LOW(10)
000182   +  	__PUTB1MN _pcnt,1
         ;     724 		bB=1;
000184       	SBI  0x2A,2
error : Illegal argument type or count
         ;     725 		}
         ;     726 	else if((adc_data<=30)&&bB)
000185 c046      	RJMP _0x78
          _0x77:
000186 d13b      	RCALL SUBOPT_0xF
000187 f010      	BRLO _0x7A
000188       	SBIC 0x2A,2
error : Illegal argument type or count
000189 c001      	RJMP _0x7B
          _0x7A:
00018a c041      	RJMP _0x79
          _0x7B:
         ;     727 		{
         ;     728 		bB=0;
00018b       	CBI  0x2A,2
error : Illegal argument type or count
         ;     729 		adc_bankU[1,adc_cntB]=bankB/10;
00018c   +  	__POINTW2MN _adc_bankU,50
00018e 91e0 0221 	LDS  R30,_adc_cntB
000190 d13a      	RCALL SUBOPT_0x10
000191 0fea      	ADD  R30,R26
000192 1ffb      	ADC  R31,R27
000193 93ff      	PUSH R31
000194 93ef      	PUSH R30
000195   +  	__GETW2R 11,12
000197 d0fe      	RCALL SUBOPT_0x5
000198 91af      	POP  R26
000199 91bf      	POP  R27
00019a d14d      	RCALL __PUTWP1
         ;     730 		bankB=0;
00019b 24bb      	CLR  R11
00019c 24cc      	CLR  R12
         ;     731 		if(++adc_cntB>=25) 
00019d 91a0 0221 	LDS  R26,_adc_cntB
00019f 5faf      	SUBI R26,-LOW(1)
0001a0 93a0 0221 	STS  _adc_cntB,R26
0001a2 31a9      	CPI  R26,LOW(0x19)
0001a3 f140      	BRLO _0x7C
         ;     732 			{
         ;     733 			char i;
         ;     734 			adc_cntB=0;
0001a4 d0f5      	RCALL SUBOPT_0x6
         ;	i -> Y+0
0001a5 93e0 0221 	STS  _adc_cntB,R30
         ;     735 			adc_bankU_[1]=0;
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 e0f0      	LDI  R31,HIGH(0)
0001a9   +  	__PUTW1MN _adc_bankU_,2
         ;     736 			for(i=0;i<25;i++)
0001ad d0ef      	RCALL SUBOPT_0x7
          _0x7E:
0001ae d0f1      	RCALL SUBOPT_0x8
0001af f4a0      	BRSH _0x7F
         ;     737 				{
         ;     738 				adc_bankU_[1]+=adc_bankU[1,i];
0001b0   +  	__POINTW2MN _adc_bankU_,2
0001b2 93bf      	PUSH R27
0001b3 93af      	PUSH R26
0001b4 d12f      	RCALL __GETW1P
0001b5 93ff      	PUSH R31
0001b6 93ef      	PUSH R30
0001b7   +  	__POINTW2MN _adc_bankU,50
0001b9 d115      	RCALL SUBOPT_0x11
0001ba d0e8      	RCALL SUBOPT_0x9
0001bb 91af      	POP  R26
0001bc 91bf      	POP  R27
0001bd 0fea      	ADD  R30,R26
0001be 1ffb      	ADC  R31,R27
0001bf 91af      	POP  R26
0001c0 91bf      	POP  R27
0001c1 d126      	RCALL __PUTWP1
         ;     739 				}
0001c2 d0e4      	RCALL SUBOPT_0xA
0001c3 cfea      	RJMP _0x7E
          _0x7F:
         ;     740 			adc_bankU_[1]/=25;	
0001c4   +  	__POINTW2MN _adc_bankU_,2
0001c6 93bf      	PUSH R27
0001c7 93af      	PUSH R26
0001c8 d0e2      	RCALL SUBOPT_0xB
0001c9 91af      	POP  R26
0001ca 91bf      	POP  R27
0001cb d0e5      	RCALL SUBOPT_0xC
         ;     741 			}	
         ;     742 		}	
          _0x7C:
         ;     743 	} 
          _0x79:
          _0x78:
         ;     744 		
         ;     745 if(input_index==0)
          _0x6A:
0001cc 91e0 0233 	LDS  R30,_input_index_SD
0001ce 30e0      	CPI  R30,0
0001cf f009      	BREQ PC+2
0001d0 c062      	RJMP _0x80
         ;     746 	{
         ;     747 	if((adc_data>100)&&!bC_)
0001d1 d09e      	RCALL SUBOPT_0x0
0001d2 f410      	BRSH _0x82
0001d3       	SBIS 0x2A,0
error : Illegal argument type or count
0001d4 c001      	RJMP _0x83
          _0x82:
0001d5 c004      	RJMP _0x81
          _0x83:
         ;     748     			{
         ;     749     			bC_=1;
0001d6       	SBI  0x2A,0
error : Illegal argument type or count
         ;     750     			cnt_x=0;
0001d7 e0e0      	LDI  R30,LOW(0)
0001d8 93e0 0225 	STS  _cnt_x,R30
         ;     751     			}
         ;     752     		if((adc_data<100)&&bC_)
          _0x81:
0001da d0a4      	RCALL SUBOPT_0x2
0001db f410      	BRSH _0x85
0001dc       	SBIC 0x2A,0
error : Illegal argument type or count
0001dd c001      	RJMP _0x86
          _0x85:
0001de c001      	RJMP _0x84
          _0x86:
         ;     753     			{
         ;     754     			bC_=0;
0001df       	CBI  0x2A,0
error : Illegal argument type or count
         ;     755     			}	
         ;     756 	
         ;     757 	if(adc_data>30)
          _0x84:
0001e0 d0e1      	RCALL SUBOPT_0xF
0001e1 f458      	BRSH _0x87
         ;     758 		{
         ;     759 		bankC+=adc_data;
0001e2 91e0 0223 	LDS  R30,_adc_data
0001e4 91f0 0224 	LDS  R31,_adc_data+1
0001e6   +  	__ADDWRR 13,14,30,31
         ;     760 		pcnt[2]=10;
0001e8 e0ea      	LDI  R30,LOW(10)
0001e9   +  	__PUTB1MN _pcnt,2
         ;     761 		bC=1;
0001eb       	SBI  0x2A,3
error : Illegal argument type or count
         ;     762 		}
         ;     763 	else if((adc_data<=30)&&bC)
0001ec c046      	RJMP _0x88
          _0x87:
0001ed d0d4      	RCALL SUBOPT_0xF
0001ee f010      	BRLO _0x8A
0001ef       	SBIC 0x2A,3
error : Illegal argument type or count
0001f0 c001      	RJMP _0x8B
          _0x8A:
0001f1 c041      	RJMP _0x89
          _0x8B:
         ;     764 		{
         ;     765 		bC=0;
0001f2       	CBI  0x2A,3
error : Illegal argument type or count
         ;     766 		adc_bankU[2,adc_cntC]=bankC/10;
0001f3   +  	__POINTW2MN _adc_bankU,100
0001f5 91e0 0222 	LDS  R30,_adc_cntC
0001f7 d0d3      	RCALL SUBOPT_0x10
0001f8 0fea      	ADD  R30,R26
0001f9 1ffb      	ADC  R31,R27
0001fa 93ff      	PUSH R31
0001fb 93ef      	PUSH R30
0001fc   +  	__GETW2R 13,14
0001fe d097      	RCALL SUBOPT_0x5
0001ff 91af      	POP  R26
000200 91bf      	POP  R27
000201 d0e6      	RCALL __PUTWP1
         ;     767 		bankC=0;
000202 24dd      	CLR  R13
000203 24ee      	CLR  R14
         ;     768 		if(++adc_cntC>=25) 
000204 91a0 0222 	LDS  R26,_adc_cntC
000206 5faf      	SUBI R26,-LOW(1)
000207 93a0 0222 	STS  _adc_cntC,R26
000209 31a9      	CPI  R26,LOW(0x19)
00020a f140      	BRLO _0x8C
         ;     769 			{
         ;     770 			char i;
         ;     771 			adc_cntC=0;
00020b d08e      	RCALL SUBOPT_0x6
         ;	i -> Y+0
00020c 93e0 0222 	STS  _adc_cntC,R30
         ;     772 			adc_bankU_[2]=0;
00020e e0e0      	LDI  R30,LOW(0)
00020f e0f0      	LDI  R31,HIGH(0)
000210   +  	__PUTW1MN _adc_bankU_,4
         ;     773 			for(i=0;i<25;i++)
000214 d088      	RCALL SUBOPT_0x7
          _0x8E:
000215 d08a      	RCALL SUBOPT_0x8
000216 f4a0      	BRSH _0x8F
         ;     774 				{
         ;     775 				adc_bankU_[2]+=adc_bankU[2,i];
000217   +  	__POINTW2MN _adc_bankU_,4
000219 93bf      	PUSH R27
00021a 93af      	PUSH R26
00021b d0c8      	RCALL __GETW1P
00021c 93ff      	PUSH R31
00021d 93ef      	PUSH R30
00021e   +  	__POINTW2MN _adc_bankU,100
000220 d0ae      	RCALL SUBOPT_0x11
000221 d081      	RCALL SUBOPT_0x9
000222 91af      	POP  R26
000223 91bf      	POP  R27
000224 0fea      	ADD  R30,R26
000225 1ffb      	ADC  R31,R27
000226 91af      	POP  R26
000227 91bf      	POP  R27
000228 d0bf      	RCALL __PUTWP1
         ;     776 				}
000229 d07d      	RCALL SUBOPT_0xA
00022a cfea      	RJMP _0x8E
          _0x8F:
         ;     777 			adc_bankU_[2]/=25;	
00022b   +  	__POINTW2MN _adc_bankU_,4
00022d 93bf      	PUSH R27
00022e 93af      	PUSH R26
00022f d07b      	RCALL SUBOPT_0xB
000230 91af      	POP  R26
000231 91bf      	POP  R27
000232 d07e      	RCALL SUBOPT_0xC
         ;     778 			}	
         ;     779 		}	
          _0x8C:
         ;     780 	}
          _0x89:
          _0x88:
         ;     781 
         ;     782 #asm("sei")
          _0x80:
000233 9478      	sei
         ;     783 }
000234 91e9      	LD   R30,Y+
000235 bfef      	OUT  SREG,R30
000236 91f9      	LD   R31,Y+
000237 91e9      	LD   R30,Y+
000238 91b9      	LD   R27,Y+
000239 91a9      	LD   R26,Y+
00023a 9199      	LD   R25,Y+
00023b 9019      	LD   R1,Y+
00023c 9009      	LD   R0,Y+
00023d 9518      	RETI
         ;     784 
         ;     785 //===============================================
         ;     786 //===============================================
         ;     787 //===============================================
         ;     788 //===============================================
         ;     789 void main(void)
         ;     790 {
          _main:
         ;     791 // Crystal Oscillator division factor: 8
         ;     792 CLKPR=0x80;
00023e e8e0      	LDI  R30,LOW(128)
00023f 93e0 0061 	STS  0x61,R30
         ;     793 CLKPR=0x03;
000241 e0e3      	LDI  R30,LOW(3)
000242 93e0 0061 	STS  0x61,R30
         ;     794 
         ;     795 /*PORTC=0;
         ;     796 DDRC&=0xFE;*/
         ;     797 /*#ifdef DEBUG
         ;     798 UCSRA=0x02;
         ;     799 UCSRB=0xD8;
         ;     800 UCSRC=0x86;
         ;     801 UBRRH=0x00;
         ;     802 UBRRL=0x18; 
         ;     803 #endif  */
         ;     804 /*
         ;     805 #ifdef RELEASE
         ;     806 UCSRA=0x00;
         ;     807 UCSRB=0xD0;
         ;     808 UCSRC=0x00;
         ;     809 UBRRH=0x00;
         ;     810 UBRRL=0x00; 
         ;     811 #endif
         ;     812 */
         ;     813 #ifdef DEBUG
         ;     814 PORTB=0x00;
         ;     815 DDRB=0xB0;
         ;     816 DDRB|=0b00101100;
         ;     817 
         ;     818 PORTC=0x00;
         ;     819 DDRC=0x00;
         ;     820 
         ;     821 PORTD=0x00;
         ;     822 DDRD=0x02;
         ;     823 #endif 
         ;     824 
         ;     825 #ifdef RELEASE
         ;     826 PORTC=0x00;
000244 e0e0      	LDI  R30,LOW(0)
000245 b9e8      	OUT  0x8,R30
         ;     827 DDRC=0x00;
000246 b9e7      	OUT  0x7,R30
         ;     828 
         ;     829 PORTD=0x00;
000247 b9eb      	OUT  0xB,R30
         ;     830 DDRD=0x02;
000248 e0e2      	LDI  R30,LOW(2)
000249 b9ea      	OUT  0xA,R30
         ;     831 #endif 
         ;     832 /*
         ;     833 ASSR=0;
         ;     834 OCR2=0;*/
         ;     835 
         ;     836 // ADC initialization
         ;     837 
         ;     838 ADMUX=0b01000011;
00024a e4e3      	LDI  R30,LOW(67)
00024b 93e0 007c 	STS  0x7C,R30
         ;     839 ADCSRA=0xCC;
00024d ecec      	LDI  R30,LOW(204)
00024e 93e0 007a 	STS  0x7A,R30
         ;     840 
         ;     841 t0_init();
000250 de0f      	RCALL _t0_init
         ;     842 //t2_init(); 
         ;     843 del_init();
000251 de18      	RCALL _del_init
         ;     844 
         ;     845 // Timer/Counter 0 Interrupt(s) initialization
         ;     846 TIMSK0=0x02;
000252 e0e2      	LDI  R30,LOW(2)
000253 93e0 006e 	STS  0x6E,R30
         ;     847 // Timer/Counter 1 Interrupt(s) initialization
         ;     848 TIMSK1=0x00;
000255 e0e0      	LDI  R30,LOW(0)
000256 93e0 006f 	STS  0x6F,R30
         ;     849 // Timer/Counter 2 Interrupt(s) initialization
         ;     850 TIMSK2=0x00;
000258 93e0 0070 	STS  0x70,R30
         ;     851 
         ;     852 #asm("sei")
00025a 9478      	sei
         ;     853 
         ;     854 bCHER_=0;
00025b       	CBI  0x2A,6
error : Illegal argument type or count
         ;     855 ind=iMn;
00025c 93e0 022e 	STS  _ind,R30
         ;     856 
         ;     857 while (1)
          _0x90:
         ;     858 	{
         ;     859 #ifdef DEBUG
         ;     860 	UART_IN();
         ;     861 #endif
         ;     862 	if(b100Hz)
00025e 9bf1      	SBIS 0x1E,1
00025f c001      	RJMP _0x93
         ;     863 		{
         ;     864 		b100Hz=0;
000260 98f1      	CBI  0x1E,1
         ;     865 
         ;     866 /*		but_drv();
         ;     867 		but_an();
         ;     868 		pcnt_hndl();*/
         ;     869 		}   
         ;     870 	if(b10Hz)
          _0x93:
000261 9bf2      	SBIS 0x1E,2
000262 c001      	RJMP _0x94
         ;     871 		{
         ;     872 		b10Hz=0;
000263 98f2      	CBI  0x1E,2
         ;     873 /*		ind_hndl();
         ;     874 
         ;     875 	 	out_out(); */
         ;     876 		}
         ;     877 	if(b5Hz)
          _0x94:
000264 9bf3      	SBIS 0x1E,3
000265 c001      	RJMP _0x95
         ;     878 		{
         ;     879 		b5Hz=0;
000266 98f3      	CBI  0x1E,3
         ;     880 /*	  	per_drv();
         ;     881 	  	nn_drv();
         ;     882 
         ;     883 	  	
         ;     884 		deltas=delta;   */
         ;     885 			
         ;     886 		}
         ;     887 	if(b2Hz)
          _0x95:
000267 9bf4      	SBIS 0x1E,4
000268 c001      	RJMP _0x96
         ;     888 		{
         ;     889 		b2Hz=0;
000269 98f4      	CBI  0x1E,4
         ;     890 		}		 
         ;     891     	if(b1Hz)
          _0x96:
00026a 9bf5      	SBIS 0x1E,5
00026b c001      	RJMP _0x97
         ;     892 		{
         ;     893 		b1Hz=0;
00026c 98f5      	CBI  0x1E,5
         ;     894 /*		del_hndl();
         ;     895 		per_hndl();
         ;     896 		nn_hndl(); */ 
         ;     897      	}
         ;     898      #asm("wdr")	
          _0x97:
00026d 95a8      	wdr
         ;     899 	}
00026e cfef      	RJMP _0x90
         ;     900 }
          _0x98:
00026f cfff      	RJMP _0x98
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x0:
000270 91a0 0223 	LDS  R26,_adc_data
000272 91b0 0224 	LDS  R27,_adc_data+1
000274 e6e4      	LDI  R30,LOW(100)
000275 e0f0      	LDI  R31,HIGH(100)
000276 17ea      	CP   R30,R26
000277 07fb      	CPC  R31,R27
000278 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1:
000279 91e0 0225 	LDS  R30,_cnt_x
00027b 5fef      	SUBI R30,-LOW(1)
00027c 93e0 0225 	STS  _cnt_x,R30
00027e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x2:
00027f 91a0 0223 	LDS  R26,_adc_data
000281 91b0 0224 	LDS  R27,_adc_data+1
000283 36a4      	CPI  R26,LOW(0x64)
000284 e0e0      	LDI  R30,HIGH(0x64)
000285 07be      	CPC  R27,R30
000286 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x3:
000287 91a0 0223 	LDS  R26,_adc_data
000289 91b0 0224 	LDS  R27,_adc_data+1
00028b e0ea      	LDI  R30,LOW(10)
00028c e0f0      	LDI  R31,HIGH(10)
00028d 17ea      	CP   R30,R26
00028e 07fb      	CPC  R31,R27
00028f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4:
000290 e8a0      	LDI  R26,LOW(_adc_bankU)
000291 e0b1      	LDI  R27,HIGH(_adc_bankU)
000292 e0f0      	LDI  R31,0
000293 0fee      	LSL  R30
000294 1fff      	ROL  R31
000295 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x5:
000296 e0ea      	LDI  R30,LOW(10)
000297 e0f0      	LDI  R31,HIGH(10)
000298 d038      	RCALL __DIVW21U
000299 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x6:
00029a 9721      	SBIW R28,1
00029b e0e0      	LDI  R30,LOW(0)
00029c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x7:
00029d e0e0      	LDI  R30,LOW(0)
00029e 83e8      	ST   Y,R30
00029f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x8:
0002a0 81a8      	LD   R26,Y
0002a1 31a9      	CPI  R26,LOW(0x19)
0002a2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x9:
0002a3 0fae      	ADD  R26,R30
0002a4 1fbf      	ADC  R27,R31
0002a5 d03e      	RCALL __GETW1P
0002a6 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xA:
0002a7 81e8      	LD   R30,Y
0002a8 5fef      	SUBI R30,-LOW(1)
0002a9 83e8      	ST   Y,R30
0002aa 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xB:
0002ab d038      	RCALL __GETW1P
0002ac 01df      	MOVW R26,R30
0002ad e1e9      	LDI  R30,LOW(25)
0002ae e0f0      	LDI  R31,HIGH(25)
0002af d021      	RCALL __DIVW21U
0002b0 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xC:
0002b1 d036      	RCALL __PUTWP1
0002b2 9621      	ADIW R28,1
0002b3 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xD:
0002b4 91a0 0229 	LDS  R26,_cher_cnt
0002b6 91b0 022a 	LDS  R27,_cher_cnt+1
0002b8 33a2      	CPI  R26,LOW(0x32)
0002b9 e0e0      	LDI  R30,HIGH(0x32)
0002ba 07be      	CPC  R27,R30
0002bb 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xE:
0002bc 91e0 0229 	LDS  R30,_cher_cnt
0002be 91f0 022a 	LDS  R31,_cher_cnt+1
0002c0 9730      	SBIW R30,0
0002c1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xF:
0002c2 91a0 0223 	LDS  R26,_adc_data
0002c4 91b0 0224 	LDS  R27,_adc_data+1
0002c6 e1ee      	LDI  R30,LOW(30)
0002c7 e0f0      	LDI  R31,HIGH(30)
0002c8 17ea      	CP   R30,R26
0002c9 07fb      	CPC  R31,R27
0002ca 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x10:
0002cb e0f0      	LDI  R31,0
0002cc 0fee      	LSL  R30
0002cd 1fff      	ROL  R31
0002ce 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x11:
0002cf 81e8      	LD   R30,Y
0002d0 cffa      	RJMP SUBOPT_0x10
         
          __DIVW21U:
0002d1 2400      	CLR  R0
0002d2 2411      	CLR  R1
0002d3 e190      	LDI  R25,16
          __DIVW21U1:
0002d4 0faa      	LSL  R26
0002d5 1fbb      	ROL  R27
0002d6 1c00      	ROL  R0
0002d7 1c11      	ROL  R1
0002d8 1a0e      	SUB  R0,R30
0002d9 0a1f      	SBC  R1,R31
0002da f418      	BRCC __DIVW21U2
0002db 0e0e      	ADD  R0,R30
0002dc 1e1f      	ADC  R1,R31
0002dd c001      	RJMP __DIVW21U3
          __DIVW21U2:
0002de 60a1      	SBR  R26,1
          __DIVW21U3:
0002df 959a      	DEC  R25
0002e0 f799      	BRNE __DIVW21U1
0002e1 01fd      	MOVW R30,R26
0002e2 01d0      	MOVW R26,R0
0002e3 9508      	RET
         
          __GETW1P:
0002e4 91ed      	LD   R30,X+
0002e5 91fc      	LD   R31,X
0002e6 9711      	SBIW R26,1
0002e7 9508      	RET
         
          __PUTWP1:
0002e8 93ed      	ST   X+,R30
0002e9 93fc      	ST   X,R31
0002ea 9508      	RET
         
          __SAVELOCR2:
0002eb 931a      	ST   -Y,R17
0002ec 930a      	ST   -Y,R16
0002ed 9508      	RET
         
          __LOADLOCR2:
0002ee 8119      	LDD  R17,Y+1
0002ef 8108      	LD   R16,Y
0002f0 9508      	RET
         

Assembly complete with 17 errors
